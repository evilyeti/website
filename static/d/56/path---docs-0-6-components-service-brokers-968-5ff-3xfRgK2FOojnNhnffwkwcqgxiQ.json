{"pageContext":{"version":"0.6","versions":{"releases":["0.9","0.8","0.7","0.6","0.5","0.4"],"branches":["master"]},"content":{"id":"service-brokers","displayName":"Service Brokers","description":"Overal documentation for Service Brokers","type":"components","docs":[{"order":"001-overview-service-brokers","title":"Service Brokers","source":"\nA Service Broker is a server compatible with the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md) specification. A Service Broker manages the lifecycle of one or more services. It advertises a catalog of service offerings and service plans to a platform.\n\nThe Service Catalog lists all services that the Service Brokers offer. Use the Service Brokers to:\n* Provision and de-provision an instance of a service\n* Create and delete a service binding\n\nCreate a service binding to link a service instance to an application. During this process, credentials are delivered in Secrets to provide you with the information necessary to connect to the service instance. The process of deleting a service binding is known as unbinding.\n\nEach of the Service Brokers available in Kyma performs these operations in a different way. See the documentation for a given Service Broker to learn how it operates.\n\nKyma provides these Service Brokers to use with the Service Catalog:\n\n* Azure Broker\n* Google Cloud Platform Service Broker (Experimental)\n* Application Broker\n* Helm Broker\n\nFollow the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md) specification to build your own Service Broker.\nRegister every new Service Broker in the Service Catalog to make the services and plans available to the users. For more information on registering Service Brokers in the Service Catalog, see the [Service Catalog Demonstration Walkthrough](https://github.com/kubernetes-incubator/service-catalog/blob/master/docs/walkthrough.md).\n","type":"Overview"},{"order":"002-overview-azure-broker","title":"Azure Broker","source":"\nThe Microsoft Azure Broker is an open source, [Open Service Broker](https://www.openservicebrokerapi.org/)-compatible API server that provisions managed services in the Microsoft Azure public cloud. The Azure Broker provides these Service Classes to use with the Service Catalog:\n* Azure SQL Database\n* Azure Database for MySQL\n* Azure Redis Cache\n\nSee the details of each Service Class and its specification in the Service Catalog UI.\nFor more information about the Service Brokers, see the Service Brokers **Overview** document.\n\n>**NOTE:** Kyma uses the Microsoft Azure Broker open source project. To ensure the best performance and stability of the product, Kyma uses a version of the Azure Broker that precedes the newest version released by Microsoft.\n","type":"Overview"},{"order":"003-overview-gcp-broker","title":"Google Cloud Platform Broker","source":"\n>**NOTE:** The Google Cloud Platform (GCP) Service Broker is in the experimental phase.\n\nGoogle Cloud Platform (GCP) Service Broker is an implementation of the [Open Service Broker](https://www.openservicebrokerapi.org/) (OSB) API hosted on GCP. It simplifies the delivery of GCP services to applications that run on Kyma. By creating GCP resources and managing their corresponding permissions, Service Broker makes it easy to consume GCP services from within a Kubernetes cluster.\n\nKyma provides Namespace-scoped GCP Service Broker. In each Namespace, you can configure the GCP Broker against different Google Cloud Platforms. Install the GCP Service Broker by provisioning the **Google Cloud Platform Service Broker Provider** class provided by the Helm Broker. \n\n![Service Catalog view without GCP Classes](./assets/003-gcp-provider-class.png)\n\nOnce you provision the **Google Cloud Platform Service Broker Provider** class, the GCP Service Broker classes are available in the Service Catalog view in a given Namespace.\n\n![Service Catalog view without GCP Classes](./assets/003-gcp-broker-classes.png)\n\nFor more information about provisiong the **Google Cloud Platform Service Broker Provider** class, go to the service class overview in the Service Catalog UI.\n\n>**NOTE:** Google does not provide the ability to specify the broker's version so the most up-to-date version of the GCP Broker is installed.\n","type":"Overview"},{"order":"004-overview-ab","title":"Application Broker","source":"\nThe Application Broker (AB) provides Applications in the Service Catalog. An Application represents an external solution connected to the Kyma instance. The AB enables the integration of independent Applications within Kyma. It also allows you to extend the functionality of existing systems.\n\nThe AB observes all the Application custom resources and exposes their APIs and Events as ServiceClasses to the Service Catalog. When the list of remote the ServiceClasses of an Application is available in the Service Catalog, you can create an ApplicationMapping, provision those ServiceClasses, and enable them for Kyma services.\n\nThe AB implements the [Open Service Broker API](https://www.openservicebrokerapi.org/). For more details about the Service Brokers, see the Service Brokers **Overview** documentation.\n","type":"Overview"},{"order":"005-overview-helm-broker","title":"Helm Broker","source":"\nThe Helm Broker is an implementation of a service broker which runs in the Kyma cluster and deploys Kubernetes native resources using [Helm](https://github.com/kubernetes/helm) and Kyma bundles. A bundle is an abstraction layer over a Helm chart which allows you to represent it as a ClusterServiceClass in the Service Catalog. For example, a bundle can provide plan definitions or binding details. The Helm Broker fetches bundle definitions from an HTTP server. By default, the Helm Broker fetches bundles from the newest release with the [Semantic Versioning](https://semver.org/) pattern available at the [`bundles`](https://github.com/kyma-project/bundles/releases) repository.\n\nUsing bundles, you can also install other brokers, such as the [Google Cloud Platform Service Broker](https://github.com/kyma-project/bundles/tree/master/bundles/gcp-broker-provider-0.0.1).\n\nFor more information about the Service Brokers, see the **Service Brokers overview** document.\n\nThe Helm Broker implements the [Open Service Broker API][https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata] (OSB API).\nTo be compliant with the Service Catalog version used in Kyma, the Helm Broker supports only the following versions of the OSB API:\n- v2.13\n- v2.12\n- v2.11\n\n> **NOTE:** The Helm Broker does not implement the OSB API update operation.\n","type":"Overview"},{"order":"011-configuration-helm-broker","title":"Configure Helm Broker","source":"\nThe Helm Broker fetches bundle definitions from an HTTP server defined in the `values.yaml` file. The **config.repository.URL** attribute defines the HTTP server URL.\n\n### Configuring the Helm Broker externally\n\nFollow these steps to change the configuration and make the Helm Broker fetch bundles from a custom HTTP server:\n\n1. Create a remote bundles repository. Your remote bundle repository must include the following resources:\n    - A `yaml` file which defines available bundles, for example `bundles.yaml`.\n      This file must have the following structure:\n\n      ```text\n      apiVersion: v1\n      entries:\n        {bundle_name}:\n          - name: {bundle_name}\n            description: {bundle_description}\n            version: {bundle_version}\n      ```\n      This is an example of a `yaml` file for the Redis bundle:\n      ```text\n      apiVersion: v1\n      entries:\n        redis:\n          - name: redis\n            description: Redis service\n            version: 0.0.1\n      ```\n\n    - A `{bundle_name}-{bundle_version}.tgz` file for each bundle version defined in the `yaml` file. The `.tgz` file is an archive of your bundle's directory.\n\n2. In the `values.yaml` provide your server's URLs in the **repository.URLs** attribute as a list of URLs separated by a semicolon:\n\n  ```yaml\n    repository:\n      URLs: \"http://custom.bundles-repository/bundles.yaml;http://another.bundles-repository/bundles.yaml\"\n  ```\n  > **NOTE:** You can skip the `yaml` filename in the URL if the name of the file is `index.yaml`. In that case, your URL should be equal to `http://custom.bundles-repository/`.\n\n3. Install Kyma on Minikube. See the **Install Kyma locally from the release** document to learn how.\n\n### Configure repository URLs in the runtime\n\nFollow these steps to add the repository URL:\n\n1. Add a new bundle repository URL:\n\n ```bash\n URLS=$(kubectl get -n kyma-system deployment/core-helm-broker --output=jsonpath='{.spec.template.spec.containers[0].env[?(@.name==\"APP_REPOSITORY_URLS\")].value}')\n kubectl set env -n kyma-system deployment/core-helm-broker -e APP_REPOSITORY_URLS=\"$URLS;http://custom.bundles-repository/bundles.yaml\"\n ```\n\n2. Wait for the Helm Broker to run using the following command:\n\n ```bash\n kubectl get pod -n kyma-system -l app=core-helm-broker\n ```\n\nRunning the Helm Broker triggers the Service Catalog synchronization automatically. New ClusterServiceClasses appear after a half-minute.\n\n","type":"Configuration"},{"order":"012-configuration-helm-broker-bundles","title":"How to create a bundle","source":"\n[bind]: https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#binding  \"OSB Spec Binding\"\n[service-objects]: https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object \"OSB Spec Service Objects\"\n[service-metadata]: https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata \"OSB Spec Service Metadata\"\n[plan-objects]: https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object \"OSB Spec Plan Objects\"\n\nTo create your own bundle, you must create a directory with the following structure:\n\n```\nsample-bundle/\n  ├── meta.yaml                             # A file which contains the metadata information about this bundle\n  ├── chart/                                # A directory which contains a Helm chart that installs your Kubernetes resources\n  │    └── <chart-name>/                    # A Helm chart directory\n  │         └── ....                        # Helm chart files\n  └── plans/                                # A directory which contains the possible plans for an installed chart\n       ├── example-enterprise               # A directory of files for a specific plan\n       │   ├── meta.yaml                    # A file which contains the metadata information about this plan\n       │   ├── bind.yaml                    # A file which contains information about the values that the Helm Broker returns when it receives the bind request\n       │   ├── create-instance-schema.json  # The JSON Schema definitions for creating a ServiceInstance\n       │   ├── bind-instance-schema.json    # The JSON Schema definitions for binding a ServiceInstance\n       │   ├── update-instance-schema.json  # The JSON Schema definitions for updating a ServiceInstance\n       │   └── values.yaml                  # The default configuration values in this plan for a chart defined in the `chart` directory\n       └── ....\n```\n\n> **NOTE:** All the file names in the bundle directory are case-sensitive.\n\n\n### The bundle meta.yaml file\n\nThe `meta.yaml` file is mandatory as it contains information about the bundle. Set the following fields to create service objects which comply with the [Open Service Broker API][service-objects].\n\n|      Field Name     | Required |                                                                  Description                                                                           |\n|:-------------------:|:--------:|:------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|         **name**        |   true   |                           The bundle name. It has the same restrictions as defined in the [Open Service Broker API][service-objects].                           |\n|       **version**       |   true   | The bundle version. It is a broker service identifier. It has the same restrictions as defined in the [Open Service Broker API][service-objects]. |\n|          **id**         |   true   |            A broker service identifier. It has the same restrictions as defined in the [Open Service Broker API][service-objects].           |\n|     **description**     |   true   |                  A short description of the service. It has the same restrictions as defined in the [Open Service Broker API][service-objects].                  |\n|         **tags**        |   false  |                                    The keywords describing the provided service, separated by commas.                                                          |\n|       **bindable**      |   false  |                                    The bindable field described in the [Open Service Broker API][service-metadata].                                          |\n|     **displayName**     |   true   |                                    The **displayName** field described in the [Open Service Broker API][service-metadata].                                       |\n| **providerDisplayName** |   false  |                                The **providerDisplayName** field described in the [Open Service Broker API][service-metadata].                                   |\n|   **longDescription**   |   false  |                                  The **longDescription** field described in the [Open Service Broker API][service-metadata].                                     |\n|   **documentationURL**  |   false  |                                  The **documentationURL** field described in the [Open Service Broker API][service-metadata].                                    |\n|      **supportURL**     |   false  |                                     The **supportURL** field described in the [Open Service Broker API][service-metadata].                                       |\n|       **imageURL**      |   false  |     The **imageURL** field described in the [Open Service Broker API][service-metadata]. You must provide the image as an SVG.          |\n|       **labels**        |   false  |     To organize your project, add arbitrary labels as key/value pairs. Use labels to indicate different elements, such as environments, services, or teams.   |\n| **bindingsRetrievable** |   false  |     The **bindingRetrievable** field specifies whether fetching a ServiceBinding using a `GET` call on the resource's endpoint is supported for all plans. The default value is `false`.   |\n|   **planUpdatable**     |   false  |     The **planUpdatable** field specifies whether instances of this service can be updated to a different plan. The default value is `false`  |\n|       **requires**      |   false  |     The **requires** field defines a list of permissions the user must grant to the instances of this service.          |\n\n### The chart directory\n\nIn the mandatory `chart` directory, create a folder with the same name as your chart. Put all the files related to your chart in this folder. The system supports chart version 2.6.\n\nIf you are not familiar with the chart definitions, see the [Charts](https://github.com/kubernetes/helm/blob/release-2.6/docs/charts.md) specification.\n\n> **NOTE:** Helm Broker uses the [helm wait](https://github.com/kubernetes/helm/blob/release-2.6/docs/using_helm.md#helpful-options-for-installupgraderollback) option to ensure that all the resources that a chart creates are available. If you set your Deployment **replicas** to `1`, you must set **maxUnavailable** to `0` as a part of the rolling update strategy.\n\n### The plans directory\n\nThe mandatory `plans` directory must contain at least one plan.\nA directory for a specific plan must contain the `meta.yaml` file. Other files, such as `create-instance-schema.json`, `bind.yaml` and `values.yaml` are not mandatory.\n\n#### The meta.yaml file\n\nThe `meta.yaml` file contains information about a bundle plan. Set the following fields to create the plan objects, which comply with the [Open Service Broker API][plan-objects].\n\n|  Field Name | Required |                                             Description                                                    |\n|:-----------:|:--------:|:----------------------------------------------------------------------------------------------------------:|\n|     **name**    |   true   |     The plan name. It has the same restrictions as defined in the [Open Service Broker API][plan-objects].    |\n|      **id**     |   true   |      The plan ID. It has the same restrictions as defined in the [Open Service Broker API][plan-objects].     |\n| **description** |   true   | The plan description. It has the same restrictions as defined in the [Open Service Broker API][plan-objects]. |\n| **displayName** |   true   | The plan display name. It has the same restrictions as defined in the [Open Service Broker API][plan-objects]. |\n|  **bindable**   |   false  | The plan bindable attribute. It has the same restrictions as defined in the [Open Service Broker API][plan-objects].    |\n|     **free**    |   false  | The attribute which specifies whether the instance is free or not. The default value is `false`.    |\n\n#### The bind.yaml file\n\nThe `bind.yaml` file contains the information required for the [binding action][bind] in a specific plan.\nIf you defined in the `meta.yaml` file that your plan is bindable, you must also create a `bind.yaml` file.\nFor more information about the content of the `bind.yaml` file, see the [Binding bundles](#configuration-binding-bundles) document.\n\n#### The values.yaml file\n\nThe `values.yaml` file provides the default configuration values in a concrete plan for the chart definition located in the `chart` directory.\nThis file is not required.\nFor more information about the content of the `values.yaml` file, see the [Values Files](https://github.com/kubernetes/helm/blob/release-2.6/docs/chart_template_guide/values_files.md) specification.\n\n#### The create-instance-schema.json file\n\nThe `create-instance-schema.json` file contains a schema used to define the parameters for a provision operation of the ServiceInstance. Each input parameter is expressed as a property within a JSON object.\nThis file is not required.\nFor more information about the content of the `create-instance-schema.json` file, see the [Schemas](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#schemas-object) specification.\n\n#### The update-instance-schema.json file\n\nThe `update-instance-schema.json` file contains a schema used to define the parameters for an update operation of the ServiceInstance. Each input parameter is expressed as a property within a JSON object.\nThis file is not required.\nFor more information about the content of the `update-instance-schema.json` file, see the [Schemas](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#schemas-object) specification.\n\n#### The bind-instance-schema.json file\n\nThe `bind-instance-schema.json` file contains a schema used to define the parameters for a bind operation. Each input parameter is expressed as a property within a JSON object.\nThis file is not required.\nFor more information about the content of the `bind-instance-schema.json` file, see the [Schemas](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#schemas-object) specification.\n\n### Troubleshooting\n\nUse the dry-run mode to check the generated manifests of the chart without installing it.\nThe **--debug** option prints the generated manifests.\nAs a prerequisite, you must install [Helm](https://github.com/kubernetes/helm) on your machine to run this command:\n\n```\n helm install --dry-run {path-to-chart} --debug\n```\nFor more details, read the Helm [official documentation](https://docs.helm.sh/chart_template_guide/#debugging-templates).\n","type":"Configuration"},{"order":"013-configuration-helm-broker-bundles-binding","title":"Binding bundles","source":"\n\n[bind]: https://github.com/openservicebrokerapi/servicebroker/blob/v2.12/spec.md#binding  \"OSB Spec Binding\"\n\nIf you defined in the `meta.yaml` file that your plan is bindable, you must also create a `bind.yaml` file.\nThe `bind.yaml` file supports the [Service Catalog](https://github.com/kubernetes-incubator/service-catalog) binding concept. The `bind.yaml` file contains information the system uses in the [binding process][bind].\nThe `bind.yaml` file is mandatory for all bindable plans. Currently, Kyma supports only the [credentials](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#types-of-binding)-type binding.   \n\n\n>**NOTE:** Resolving the values from the `bind.yaml` file is a post-provision action. If this operation ends with an error, the provisioning also fails.\n\n## Details\n\nThis section provides an example of the `bind.yaml` file. It further describes the templating, the policy concerning credential name conflicts, and the detailed `bind.yaml` file specification.\n\n### Example usage\n\n```yaml\n# bind.yaml\ncredential:\n  - name: HOST\n    value: redis.svc.cluster.local\n  - name: PORT\n    valueFrom:\n      serviceRef:\n        name: redis-svc\n        jsonpath: '{ .spec.ports[?(@.name==\"redis\")].port }'\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: redis-secrets\n        key: redis-password\n\ncredentialFrom:\n  - configMapRef:\n    name: redis-config\n  - secretRef:\n    name: redis-v2-secrets\n```\n\nIn this example of the [binding action][bind], the Helm Broker returns the following values:\n- A `HOST` key with the defined inlined value.\n- A `PORT` key with the value from the field specified by the JSONPath expressions. The `redis-svc` Service runs this expression.\n- A `REDIS_PASSWORD` key with a value selected by the `redis-password` key from the `redis-secrets` Secret.\n- All the key-value pairs fetched from the `redis-config` ConfigMap.\n- All the key-value pairs fetched from the `redis-v2-secrets` Secrets.\n\n### Templating\n\nIn the `bind.yaml` file, you can use the Helm Chart templates directives.\n\n```yaml\n# bind.yaml\ncredential:\n  - name: HOST\n    value: {{ template \"redis.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local\n{{- if .Values.usePassword }}\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: {{ template \"redis.fullname\" . }}\n        key: redis-password\n{{- end }}\n```\nIn this example, the system renders the `bind.yaml` file. The system resolves all the directives enclosed in the double curly braces in the same way as in the files located in the `templates` directory in your Helm chart.\n\n### Credential name conflicts policy\n\nThe following rules apply in cases of credential name conflicts:\n- When the `credential` and the `credentialFrom` sections have duplicate values, the system uses the values from the `credential` section.\n- When you duplicate a key in the `credential` section, an error appears and informs you about the name of the key that the conflict refers to.\n- When a key exists in the multiple sources defined by the `credentialFrom` section, the value associated with the last source takes precedence.\n\n### File specification\n\n|   Field Name   |                                                                                                                              Description                                                                                                                              |\n|:--------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|   [credential](#configuration-binding-bundles-credential)   |                                                                                                         The list of the credential variables to return during the binding action.                                                                                                        |\n| [credentialFrom](#configuration-binding-bundles-credentialfrom) | The list of the sources to populate the credential variables on the binding action. When the key exists in multiple sources, the value associated with the last source takes precedence. The variables from the `credential` section override the values if duplicate keys exist. |\n\n#### Credential\n\n| Field Name |                                    Description                                    |\n|:----------:|:---------------------------------------------------------------------------------:|\n|    **name**    |                          The name of the credential variable.                         |\n|    **value**   |      A variable value. You can also use the Helm Chart templating directives.      |\n| [valueFrom](#configuration-binding-bundles-valuefrom)  | The source of the credential variable's value. You cannot use it if the value is not empty. |\n\n##### ValueFrom\n\n|    Field Name   |                               Description                              |\n|:---------------:|:----------------------------------------------------------------------:|\n| [configMapKeyRef](#configuration-binding-bundles-configmapkeyref) |    Selects a ConfigMap key in the Helm chart release Namespace.   |\n|   [secretKeyRef](#configuration-binding-bundles-secretkeyref)  |     Selects a Secret key in the Helm Chart release Namespace.     |\n|    [serviceRef](#configuration-binding-bundles-serviceref)   | Selects a Service resource in the Helm Chart release Namespace. |\n\n###### ConfigMapKeyRef\n\n| Field Name |                            Description                            |\n|:----------:|:-----------------------------------------------------------------:|\n|    **name**    |                      The name of the ConfigMap.                       |\n|     **key**    |   The name of the key from which the value is retrieved.  |\n\n###### SecretKeyRef\n\n| Field Name |                            Description                            |\n|:----------:|:-----------------------------------------------------------------:|\n|    **name**    |                       The name of the Secret.                          |\n|     **key**    | The name of the key from which the value is retrieved. |\n\n###### ServiceRef\n\n| Field Name |                                                                    Description                                                                    |\n|:----------:|:-------------------------------------------------------------------------------------------------------------------------------------------------:|\n|    **name**    |                                                                The name of the Service.                                                               |\n|  **jsonpath**  | The JSONPath expression used to select the specified field value. For more information, see the [User Guide](https://kubernetes.io/docs/user-guide/jsonpath/). |\n\n#### CredentialFrom\n\n|  Field Name  |                                   Description                                 |\n|:------------:|:-----------------------------------------------------------------------------:|\n| [configMapRef](#configuration-binding-bundles-configmapref) | The ConfigMap to retrieve the values from. It must be available in the Helm Chart release Namespace. |\n|   [secretRef](#configuration-binding-bundles-secretref)  |   The Secret to retrieve the values from. It must be available in the Helm Chart release Namespace.  |\n\n##### ConfigMapRef\n\n| Field Name |         Description        |\n|:----------:|:--------------------------:|\n|    **name**    |    The name of the ConfigMap.   |\n\n##### SecretRef\n\n| Field Name |        Description        |\n|:----------:|:-------------------------:|\n|    **name**    |  The name of the Secret.      |\n","type":"Configuration"},{"order":"014-configuration-enable-azure-broker","title":"Enable the Azure Broker for local deployment","source":">**NOTE:** To enable the Azure Broker, you need a [Microsoft Azure](https://azure.microsoft.com/en-us) subscription.\n\nBy default, the Azure Broker is disabled for local installation and does not install along with other Kyma core components.\nTo enable the installation of the Azure Broker, export these Azure Broker-specific environment variables before you install Kyma:  \n\n- `AZURE_BROKER_TENANT_ID`\n- `AZURE_BROKER_SUBSCRIPTION_ID`\n- `AZURE_BROKER_CLIENT_ID`\n- `AZURE_BROKER_CLIENT_SECRET`\n\nExport these variables using the details of your [Microsoft Azure](https://azure.microsoft.com/en-us) subscription, for example:\n```\nexport AZURE_BROKER_TENANT_ID='{YOUR_TENANT_ID}'\n```\n","type":"Configuration"},{"order":"020-architecture-ab","title":"The Application Broker architecture","source":"\nThe Application Broker (AB) workflow consists of the following steps:\n\n1. The Application Broker watches for Applications (Apps) in the cluster and ApplicationMappings (AMs) in all Namespaces.\n2. The user creates an ApplicationMapping custom resource in a given Environment. The AM activates services offered by an App. The AM must have the same name as the App.\n3. The Application Broker creates an `application-broker` Service Broker (SB) inside the Environment in which the APM is created. This Service Broker contains data of all services provided by the activated Applications. There is always only one `application-broker` Service Broker per Environment, even if there are more AMs.\n4. The Service Catalog fetches services that the `application-broker` Service Broker exposes.\n5. The Service Catalog creates a ServiceClass for each service received from the Service Broker.\n\n![AB architecture](./assets/001-AB-architecture.svg)\n\nWhen this process is complete, you can provision and bind your services.\n\n## Provisioning and binding for an API ServiceClass\n\nThis ServiceClass has a **bindable** flag set to `true` which means that you have to provision a ServiceInstance and bind it to the service or lambda to connect to the given API. The provisioning and binding workflow for an API ServiceClass consists of the following steps:\n1. Select a given API ServiceClass from the Service Catalog.\n2. Provision this ServiceClass by creating its ServiceInstance in the given Environment.\n3. Bind your ServiceInstance to the service or lambda. During the binding process, ServiceBinding and ServiceBindingUsage resources are created.\n    * ServiceBinding contains a Secret with a GatewayURL needed to connect to the given API.\n    * ServiceBindingUsage injects the Secret, together with the label given during the registration process, to the lambda or service.\n4. The service or lambda calls the API through the Application Connector. The Application Connector verifies the label to check if you have the authorization to access this API.\n5. After verifying the label, the Application Connector allows you to access the Application API.\n\n![API Service Class](./assets/020-AB-API-service-class.png)\n\n## Provisioning and binding for an Event ServiceClass\n\nThis ServiceClass has a **bindable** flag set to `false` which means that after provisioning a ServiceClass in the Environment, given Events are ready to use for all services. The provisioning workflow for an Event ServiceClass consists of the following steps:\n1. Select a given Event ServiceClass from the Service Catalog.\n2. Provision this ServiceClass by creating a ServiceInstance in the given Environment.\n3. During the provisioning process, the EventActivation resource is created together with the ServiceInstance. EventActivation allows you to create an Event Bus Subscription.\n4. A Subscription is a custom resource by which an Event Bus triggers the lambda for a particular type of Event in this step.\n5. The RemoteEnvironment sends an Event to the Application Connector.\n6. The Application Connector sends an Event to the lambda through the Event Bus.\n\n\n![Event Service Class](./assets/020-AB-event-service-class.png)\n\n## Provisioning and binding for both the API and Event ServiceClass\n\nThis ServiceClass has a **bindable** flag set to `true`.\nThe provisioning and binding workflow for both the API and Event ServiceClass is a combination of steps described for an [API ServiceClass](#architecture-the-application-broker-architecture-provisioning-and-binding-for-an-api-serviceclass) and an [Event ServiceClass](#architecture-the-application-broker-architecture-provisioning-and-binding-for-an-event-serviceclass).\n","type":"Architecture"},{"order":"021-architecture-helm-broker","title":"Helm Broker architecture","source":"\nThe Helm Broker workflow starts with the registration process, during which the Helm Broker fetches bundles from the Kyma `bundles` directory, or from a remote HTTP server.\n\n### Registration process\n\nThe registration process in case of the Helm Broker consists of the following steps:\n1. The Helm Broker fetches bundles from the remote HTTP server.\n2. The Helm Broker registers bundles as ServiceClasses in the Service Catalog.\n\n![Helm Broker registration](./assets/010-helm-registration.png)\n\n### Bundles provisioning and binding\n\nAfter the registration, the process of bundle provisioning and binding takes place. It consists of the following steps:\n\n1. Select a given bundle ServiceClass from the Service Catalog.\n2. Provision this ServiceClass by creating its ServiceInstance in the given Environment.\n3. Bind your ServiceInstance to the service or lambda. During the binding process, ServiceBinding and ServiceBindingUsage resources are created.\n4. The service or lambda calls a bundle.\n\n![Helm Broker architecture](./assets/011-helm-architecture.png)\n","type":"Architecture"},{"order":"040-cr-event-activation","title":"EventActivation","source":"\nThe `eventactivations.applicationconnector.kyma-project.io` CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to create an Event Bus Subscription and to get an Event schema. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd eventactivations.applicationconnector.kyma-project.io -o yaml\n```\n\n## Sample custom resource\n\nThis is a sample resource that allows you to consume Events sent from the service with the `ac031e8c-9aa4-4cb7-8999-0d358726ffaa` ID in a `production` Namespace.\n\n```\napiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EventActivation\nmetadata:\n  name: \"ac031e8c-9aa4-4cb7-8999-0d358726ffaa\"\n  namespace: production\nspec:\n  displayName: \"Orders\"\n  sourceId: \"prod\"\n```\n\n## Custom resource parameters\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR and the ID of the Application service. This field is also used to fetch Event schemas from the Minio storage.  |\n| **metadata.namespace** |    **YES**   | Specifies the Namespace in which the CR is created. |\n| **spec.displayName** |    **YES**   | Specifies a human-readable name of the Application service. |\n| **spec.sourceId** |    **YES**   | Used to construct a Publish-Subscribe (Pub/Sub) topic name where the Events are send and from where the Events are consumed. |\n\n## Related resources and components\n\nThese are the resources related to this CR:\n\n| Custom resource   |   Description |\n|:----------:|:------|\n| RemoteEnvironment |  Describes a service from which the user receives Events. |\n| Subscription | Contains information on how to create an infrastructure for consuming Events. Works only if the EventActivation is enabled.  |\n\nThese components use this CR:\n\n| Component   |   Description |\n|:----------:|:------|\n| Application Broker |  Uses this CR to enable the user to receive Events from a given service. |\n| Event Bus | Uses this CR to control the consumption of an Event.  |\n| Serverless | Lambda UI sends a GraphQL query to UI API Layer to list EventActivations. |\n| UI API Layer |  Exposes the given CR to the Console UI. |\n","type":"Custom Resource"}]},"navigation":{"topics":[{"id":"kyma","contentType":"root","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"In a nutshell","anchor":"in-a-nutshell"},{"name":"Main features","anchor":"main-features"},{"name":"Technology stack","anchor":"technology-stack"},{"name":"Key components","anchor":"key-components"},{"name":"Kyma and Knative - brothers in arms","anchor":"kyma-and-knative---brothers-in-arms"},{"name":"How to start","anchor":"how-to-start"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Components","anchor":"components"},{"name":"Environments","anchor":"environments"},{"name":"Testing Kyma","anchor":"testing-kyma"},{"name":"Charts","anchor":"charts"},{"name":"Deploy with a private Docker registry","anchor":"deploy-with-a-private-docker-registry"}]},{"topicType":"Installation","name":"Installation","anchor":"installation","titles":[{"name":"Install Kyma locally from the release","anchor":"install-kyma-locally-from-the-release"},{"name":"Install Kyma locally from sources","anchor":"install-kyma-locally-from-sources"},{"name":"Install Kyma on a GKE cluster","anchor":"install-kyma-on-a-gke-cluster"},{"name":"Local installation scripts","anchor":"local-installation-scripts"},{"name":"Install subcomponents","anchor":"install-subcomponents"},{"name":"Reinstall Kyma","anchor":"reinstall-kyma"},{"name":"Install Kyma on a GKE cluster with wildcard DNS","anchor":"install-kyma-on-a-gke-cluster-with-wildcard-dns"},{"name":"Installation with custom Istio deployment","anchor":"installation-with-custom-istio-deployment"},{"name":"Installation with Knative","anchor":"installation-with-knative"},{"name":"Installation with custom Service Catalog deployment","anchor":"installation-with-custom-service-catalog-deployment"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Sample service deployment on local","anchor":"sample-service-deployment-on-local"},{"name":"Sample service deployment on a cluster","anchor":"sample-service-deployment-on-a-cluster"},{"name":"Develop a service locally without using Docker","anchor":"develop-a-service-locally-without-using-docker"},{"name":"Publish a service Docker image and deploy it to Kyma","anchor":"publish-a-service-docker-image-and-deploy-it-to-kyma"},{"name":"Helm overrides for Kyma installation","anchor":"helm-overrides-for-kyma-installation"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Installation","anchor":"installation"}]},{"topicType":"Examples","name":"Examples","anchor":"examples","titles":[{"name":"Kyma features and concepts in practice","anchor":"kyma-features-and-concepts-in-practice"}]}]},{"id":"security","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Kubeconfig generator","anchor":"kubeconfig-generator"},{"name":"Add an Identity Provider to Dex","anchor":"add-an-identity-provider-to-dex"},{"name":"Manage static users in Dex","anchor":"manage-static-users-in-dex"},{"name":"Update TLS certificate","anchor":"update-tls-certificate"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Group","anchor":"group"},{"name":"Identity Provider Presets","anchor":"identity-provider-presets"}]}]},{"id":"service-catalog","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Resources","anchor":"resources"},{"name":"Add a service to the Catalog","anchor":"add-a-service-to-the-catalog"},{"name":"Provisioning and binding","anchor":"provisioning-and-binding"},{"name":"Service Catalog backup and restore","anchor":"service-catalog-backup-and-restore"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"ServiceBindingUsage","anchor":"servicebindingusage"},{"name":"UsageKind","anchor":"usagekind"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Register a broker in the Service Catalog","anchor":"register-a-broker-in-the-service-catalog"}]},{"topicType":"UI Contracts","name":"UI Contracts","anchor":"ui-contracts","titles":[{"name":"Overview","anchor":"overview"},{"name":"Catalog view","anchor":"catalog-view"},{"name":"Instances view","anchor":"instances-view"}]}]},{"id":"service-brokers","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Service Brokers","anchor":"service-brokers"},{"name":"Azure Broker","anchor":"azure-broker"},{"name":"Google Cloud Platform Broker","anchor":"google-cloud-platform-broker"},{"name":"Application Broker","anchor":"application-broker"},{"name":"Helm Broker","anchor":"helm-broker"}]},{"topicType":"Configuration","name":"Configuration","anchor":"configuration","titles":[{"name":"Configure Helm Broker","anchor":"configure-helm-broker"},{"name":"How to create a bundle","anchor":"how-to-create-a-bundle"},{"name":"Binding bundles","anchor":"binding-bundles"},{"name":"Enable the Azure Broker for local deployment","anchor":"enable-the-azure-broker-for-local-deployment"}]},{"topicType":"Architecture","name":"Architecture","anchor":"architecture","titles":[{"name":"The Application Broker architecture","anchor":"the-application-broker-architecture"},{"name":"Helm Broker architecture","anchor":"helm-broker-architecture"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"EventActivation","anchor":"eventactivation"}]}]},{"id":"application-connector","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Architecture","name":"Architecture","anchor":"architecture","titles":[{"name":"Application Connector components","anchor":"application-connector-components"},{"name":"Connector Service","anchor":"connector-service"},{"name":"Application Proxy","anchor":"application-proxy"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"},{"name":"Access the Application Connector on a local Kyma deployment","anchor":"access-the-application-connector-on-a-local-kyma-deployment"},{"name":"Consume applications through the Service Catalog","anchor":"consume-applications-through-the-service-catalog"},{"name":"Application Registry","anchor":"application-registry"},{"name":"Pass an access token in a request header","anchor":"pass-an-access-token-in-a-request-header"},{"name":"Register a secured API","anchor":"register-a-secured-api"}]},{"topicType":"API","name":"API","anchor":"api","titles":[{"name":"Connector Service","anchor":"connector-service"},{"name":"Application Registry","anchor":"application-registry"},{"name":"Event Service","anchor":"event-service"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Create a new Application","anchor":"create-a-new-application"},{"name":"Get the client certificate","anchor":"get-the-client-certificate"},{"name":"Register a service","anchor":"register-a-service"},{"name":"Bind an Application to an Environment","anchor":"bind-an-application-to-an-environment"},{"name":"Trigger a lambda with events","anchor":"trigger-a-lambda-with-events"},{"name":"Call a registered external service from Kyma","anchor":"call-a-registered-external-service-from-kyma"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Application","anchor":"application"},{"name":"ApplicationMapping","anchor":"applicationmapping"},{"name":"TokenRequest","anchor":"tokenrequest"}]}]},{"id":"event-bus","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Basic concepts","anchor":"basic-concepts"},{"name":"Event flow requirements","anchor":"event-flow-requirements"},{"name":"Service Programming Model","anchor":"service-programming-model"},{"name":"Troubleshooting","anchor":"troubleshooting"},{"name":"Subscription updates","anchor":"subscription-updates"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Subscription","anchor":"subscription"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"service-mesh","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Sidecar Proxy Injection","anchor":"sidecar-proxy-injection"},{"name":"Istio patch","anchor":"istio-patch"}]}]},{"id":"serverless","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Custom Resources","anchor":"custom-resources"},{"name":"Managing Lambdas","anchor":"managing-lambdas"},{"name":"The Node.js Programming Model","anchor":"the-node.js-programming-model"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"monitoring","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Expose custom metrics in Kyma","anchor":"expose-custom-metrics-in-kyma"}]}]},{"id":"tracing","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Jaeger","anchor":"jaeger"},{"name":"Propagate HTTP headers","anchor":"propagate-http-headers"},{"name":"Compare traces","anchor":"compare-traces"},{"name":"Benefits of distributed tracing","anchor":"benefits-of-distributed-tracing"}]}]},{"id":"api-gateway","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Api","anchor":"api"}]}]},{"id":"logging","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Access OK Log","anchor":"access-ok-log"}]}]},{"id":"console","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"UI extensibility","anchor":"ui-extensibility"},{"name":"UI API Layer","anchor":"ui-api-layer"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"MicroFrontend","anchor":"microfrontend"},{"name":"ClusterMicroFrontend","anchor":"clustermicrofrontend"},{"name":"BackendModule","anchor":"backendmodule"}]}]}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Service Brokers","id":"service-brokers"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Console","id":"console"}]},"assetsPath":"/assets/docs/0.6/service-brokers/docs/assets/","locale":"en"}}