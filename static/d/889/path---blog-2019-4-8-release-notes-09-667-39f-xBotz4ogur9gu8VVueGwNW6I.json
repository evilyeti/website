{"data":{"markdownRemark":{"id":"d6f0f631-c809-52b0-8ebc-f2dc78827e7c","html":"<p>The 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by <code>xip.io</code>. Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS.</p>\n<!-- overview -->\n<p>The highlights of Kyma 0.9 Florence include:</p>\n<ul>\n<li><a href=\"#kyma-with-knative-eventing\">Knative-based eventing by default</a> - The eventing mechanism is now based on Knative by default.</li>\n<li><a href=\"#installation\">Xip.io wildcard as the default DNS solution</a> - We integrated the <code>xip.io</code> wildcard DNS as the default DNS solution.</li>\n<li><a href=\"#headless-cms\">Headless CMS component introduced for the Console UI</a> - We introduced the Headless CMS component that allows you to store and manage content, and expose it through an API.</li>\n<li><a href=\"#monitoring-stack-version-update\">Updated Monitoring stack version</a> - We updated the entire Monitoring stack.</li>\n<li><a href=\"#test-runner-for-the-kyma-upgrade\">Improved upgrade process</a> - We developed a testing framework that automates checking the state of Kyma components after the upgrade.</li>\n</ul>\n<p>See the overview of all changes in this release:</p>\n<ul>\n<li><a href=\"#application-connector\">Application Connector</a> - Connector Service enhancements and extensions</li>\n<li><a href=\"#console\">Console</a> - Console views that display documentation use the new Headless CMS</li>\n<li><a href=\"#core-and-supporting\">Core and Supporting</a> - Kyma Headless CMS as the default solution for handling documentation</li>\n<li><a href=\"#eventing\">Eventing</a> - Knative Eventing enabled by default, improved security, alerting and monitoring added</li>\n<li><a href=\"#installation\">Installation</a> - <code>Xip.io</code> wildcard as the default DNS solution, test runner for the Kyma upgrade</li>\n<li><a href=\"#monitoring\">Monitoring</a> - Monitoring stack upgraded to the latest version</li>\n<li><a href=\"#security\">Security</a> - TLS in Tiller, external bundles repositories with TLS in the Helm Broker, Istio with mutual TLS for the Service Catalog and all Service Brokers</li>\n<li><a href=\"#service-mesh\">Service Mesh</a> - Upgrade to Istio 1.1</li>\n</ul>\n<hr>\n<h2>Application Connector</h2>\n<blockquote>\n<p><strong>CAUTION:</strong> To ensure the persistence of API services specifications, run the migration script to move successfully from v0.8 to v0.9. Read the <a href=\"https://github.com/kyma-project/kyma/blob/release-0.9/docs/migration-guides/0.8-0.9.md\">Migration Guide</a> for details.</p>\n</blockquote>\n<h3>Application Registry API can fetch generated client certificates</h3>\n<p>We extended the Application Registry API with the possibility to fetch the generated client certificates. As soon as you register an API secured with the client certificate verification as a security mechanism, you can read this certificate with our API. Read <a href=\"https://kyma-project.io/docs/components/application-connector/#tutorials-register-a-secured-api\">this</a> document for more information.</p>\n<h3>Apply details for the tenant and group name</h3>\n<p>We extended the TokenRequest functionality and now you can apply details for the tenant name and group name. It allows you to easily manage the token generation process for pairing applications in the central Connector Service. For more details, read <a href=\"https://kyma-project.io/docs/components/application-connector/#custom-resource-tokenrequest\">this</a> document.</p>\n<h3>Read about the Root CA rotation procedure</h3>\n<p>We updated our documentation with the description of the <a href=\"https://kyma-project.io/docs/master/components/application-connector/#tutorials-rotate-the-root-ca-certificate-and-key\">Root CA rotation procedure</a>.</p>\n<h3>Acceptance tests for the Gateway Service</h3>\n<p>We enhanced the Gateway Service with the extended set of acceptance tests, which increases our confidence in the stability and performance of the component.</p>\n<h3>Headers management</h3>\n<p>We changed the Application Gateway proxy functionality and now the unnecessary headers, such as <code>X-Forwarded-For</code>, are removed while making calls to external solutions. For the full list of removed headers, read <a href=\"https://kyma-project.io/docs/master/components/application-connector/#architecture-application-gateway-handling-of-headers\">this</a> document.</p>\n<h2>Console</h2>\n<h3>Documentation UI integrated with Headless CMS</h3>\n<p>The Documentation UI, which you can access in the Console UI, is now integrated with the Headless CMS. This means you can extend the Documentation view, the one you see after clicking the <strong>?</strong> icon, with your custom documentation topics as long as you have your docs written in Markdown and extended with additional metadata. The code snippet below is an example of a ClusterDocsTopic custom resource that will extend the Documentation UI navigation with a new element called <strong>Prometheus</strong> under a <strong>Components</strong> heading. After clicking <strong>Prometheus</strong>, you will see the official Prometheus documentation.</p>\n<pre><code class=\"language-yaml\">cat &#x3C;&#x3C;EOF | kubectl apply -f -\napiVersion: cms.kyma-project.io/v1alpha1\nkind: ClusterDocsTopic\nmetadata:\n  labels:\n    cms.kyma-project.io/view-context: docs-ui\n    cms.kyma-project.io/group-name: components\n    cms.kyma-project.io/order: \"2\"\n  name: prometheus\nspec:\n  displayName: \"Prometheus\"\n  description: \"Some docs about Prometheus concepts\"\n  sources:\n    - type: markdown\n      name: docs\n      mode: package\n      url: https://github.com/prometheus/docs/archive/master.zip\n      filter: content/docs/concepts\nEOF\n</code></pre>\n<h3>Service Catalog related views integrated with Headless CMS</h3>\n<p>The Service Catalog-related views now read documentation provided with the new Headless CMS. This means that you can easily provide documentation and specifications for any service that you want to share through the Service Catalog. See the example DocsTopic custom resourceâ€¯for artificial Service Class that exposes Slack APIs:</p>\n<pre><code class=\"language-yaml\">apiVersion: cms.kyma-project.io/v1alpha1\nkind: DocsTopic\nmetadata:\n  name: {$SERVICE_CLASS_ID}\n  labels:\n    cms.kyma-project.io/view-context: service-catalog\nspec:\n  displayName: Slack\n  description: \"Slack documentation\"\n  sources:\n    - type: markdown\n      name: markdown-doc\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/README.md\n    - type: asyncapi\n      name: events-api\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/events-api/slack_events_api_async_v1.json\n    - type: openapi\n      name: openapi-swagger\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json\n</code></pre>\n<h2>Core and Supporting</h2>\n<h3>Headless CMS</h3>\n<p>In Kyma, we value the content-as-code principle. It means that documentation is treated the same as code, as in the end, it is not much different. We decided to go one step further. If content is like code, why not deploy it into the Kubernetes cluster as code as well? If you can easily deploy a service using the Deployment resource, you can do the same with documentation. This is what we implemented - the Headless CMS, based on Kubernetes Custom Resource Definitions, that uses our other component, the <a href=\"https://kyma-project.io/docs/components/asset-store\">Asset Store</a>, for storage.</p>\n<p>The Headless CMS itself does not yet deliver any customizable UI interface that could be used to publish a standalone documentation portal. Nevertheless, we already use it in the Console UI. For more details, read the Headless CMS <a href=\"https://kyma-project.io/docs/master/components/headless-cms\">documentation</a>.</p>\n<h3>Asset Store supports a webhook service that can enhance the status of the CR with additional metadata for each file</h3>\n<p>You can now extend the Asset Store status sub-resource with additional metadata information for each file created by the controller. To do so, create a separate service that implements REST API and accepts <code>multipart/form-data</code>. One of the use cases for such a service is to extract the front matter metadata provided in any file of the <code>yaml</code> format.\nSee the example AssetStore resource that contains information about the status modification webhook:</p>\n<pre><code class=\"language-yaml\">apiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  labels:\n    controller-tools.k8s.io: \"1.0\"\n  name: asset-sample\n  namespace: default\nspec:\n  bucketRef:\n    name: test-sample\n  source:\n    url: https://github.com/kyma-project/kyma/archive/0.8.1.zip\n    filter: /docs/service-catalog/docs/\n    mode: package\n    metadataWebhookService:\n    - name: assetstore-asset-metadata-service\n      namespace: kyma-system\n      endpoint: /v1/extract\n      filter: \\.md$\n</code></pre>\n<p>To learn more about webhook services, read <a href=\"https://kyma-project.io/docs/components/asset-store/#custom-resource-asset-validation-and-mutation-webhook-services\">this</a> document.</p>\n<h3>Asset Store stack enhanced with a default service that can extract metadata from any file</h3>\n<p>With the support of the new metadata webhook, we added a default service to the Asset Store domain. You can use it to extract the front matter metadata provided in any file of the <code>yaml</code> format. We already use this service in the Headless CMS component. For more details, read <a href=\"https://kyma-project.io/docs/master/components/asset-store/#details-asset-metadata-service\">this</a> document.</p>\n<h2>Eventing</h2>\n<h3>Kyma with Knative Eventing</h3>\n<p>Kyma now uses Knative Eventing backed by NATS Streaming by default. This is a big first step towards leveraging Knative Eventing capabilities in the upcoming releases.</p>\n<h3>Improved security</h3>\n<p>Access to NATS Streaming is now restricted only to applications that store and read Events.</p>\n<h3>Alerting and monitoring added</h3>\n<p>We added alerting and monitoring for eventing backing services.</p>\n<h2>Installation</h2>\n<h3>Xip.io wildcard as the default DNS solution</h3>\n<p>The wildcard DNS provided by <code>xip.io</code> is integrated as the default DNS solution, which means you can now install Kyma on GKE and AKS clusters and create a playground environment even easier. Simply start the installation on your cluster and don't worry about owning a domain or configuring your cluster in a specific way. If you want to spin up a production-ready cluster, the process doesn't change. When you provide your own domain and TLS certificates, the Installer uses them instead of these provided by <code>xip.io</code>. Additionally, all scenarios support Application Connectivity.</p>\n<h3>Test runner for the Kyma upgrade</h3>\n<p>We created a test runner and a place for end-to-end upgrade tests executed by <a href=\"https://status.build.kyma-project.io/?job=post-master-kyma-gke-upgrade\">Kyma upgrade plan on CI</a>. The framework allows you to prepare the data and run tests against the prepared data. For more information on end-to-end upgrade tests, read <a href=\"https://github.com/kyma-project/kyma/tree/master/tests/end-to-end/upgrade\">this</a> document.</p>\n<h2>Monitoring</h2>\n<h3>Monitoring Stack version update</h3>\n<p>We upgraded the entire Monitoring stack based on the Prometheus operator to the latest version. The upgraded components are Alertmanager v0.16.1, Prometheus Operator v0.29.0, Prometheus v2.7.1, and Grafana v6.0.1.</p>\n<h2>Security</h2>\n<h3>TLS in Tiller</h3>\n<p>From this release, communication with Tiller requires a TLS certificate. For developers who install Kyma locally using Minikube, the start-up scripts automatically set certificates for Helm. However, from now on it is mandatory to add the <code>--tls</code> flag to every Helm command.</p>\n<h3>Helm Broker enforces TLS for external bundles repositories</h3>\n<p>From now on, on your non-local clusters, you can use only servers with TLS enabled. All incorrect or unsecured URLs will be omitted. You can use unsecured URLs only on your local cluster. For more information, read <a href=\"https://kyma-project.io/docs/master/components/helm-broker/#configuration-configuration-configuration-rules\">this</a> document.</p>\n<h3>Istio with mutual TLS for the Service Catalog and Service Brokers</h3>\n<p>We introduced Istio with mutual TLS for the Service Catalog and for all Service Brokers (the Helm Broker, Application Broker, and Azure Broker).</p>\n<h2>Service Mesh</h2>\n<h3>Istio version update</h3>\n<p>Kyma now uses Istio version 1.1.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"xip.io"}]},{"type":"text","value":". Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS."}]},{"type":"text","value":"\n"},{"type":"comment","value":" overview "},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The highlights of Kyma 0.9 Florence include:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#kyma-with-knative-eventing"},"children":[{"type":"text","value":"Knative-based eventing by default"}]},{"type":"text","value":" - The eventing mechanism is now based on Knative by default."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#installation"},"children":[{"type":"text","value":"Xip.io wildcard as the default DNS solution"}]},{"type":"text","value":" - We integrated the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"xip.io"}]},{"type":"text","value":" wildcard DNS as the default DNS solution."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#headless-cms"},"children":[{"type":"text","value":"Headless CMS component introduced for the Console UI"}]},{"type":"text","value":" - We introduced the Headless CMS component that allows you to store and manage content, and expose it through an API."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#monitoring-stack-version-update"},"children":[{"type":"text","value":"Updated Monitoring stack version"}]},{"type":"text","value":" - We updated the entire Monitoring stack."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#test-runner-for-the-kyma-upgrade"},"children":[{"type":"text","value":"Improved upgrade process"}]},{"type":"text","value":" - We developed a testing framework that automates checking the state of Kyma components after the upgrade."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"See the overview of all changes in this release:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#application-connector"},"children":[{"type":"text","value":"Application Connector"}]},{"type":"text","value":" - Connector Service enhancements and extensions"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#console"},"children":[{"type":"text","value":"Console"}]},{"type":"text","value":" - Console views that display documentation use the new Headless CMS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#core-and-supporting"},"children":[{"type":"text","value":"Core and Supporting"}]},{"type":"text","value":" - Kyma Headless CMS as the default solution for handling documentation"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#eventing"},"children":[{"type":"text","value":"Eventing"}]},{"type":"text","value":" - Knative Eventing enabled by default, improved security, alerting and monitoring added"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#installation"},"children":[{"type":"text","value":"Installation"}]},{"type":"text","value":" - "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Xip.io"}]},{"type":"text","value":" wildcard as the default DNS solution, test runner for the Kyma upgrade"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#monitoring"},"children":[{"type":"text","value":"Monitoring"}]},{"type":"text","value":" - Monitoring stack upgraded to the latest version"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#security"},"children":[{"type":"text","value":"Security"}]},{"type":"text","value":" - TLS in Tiller, external bundles repositories with TLS in the Helm Broker, Istio with mutual TLS for the Service Catalog and all Service Brokers"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#service-mesh"},"children":[{"type":"text","value":"Service Mesh"}]},{"type":"text","value":" - Upgrade to Istio 1.1"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Application Connector"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"CAUTION:"}]},{"type":"text","value":" To ensure the persistence of API services specifications, run the migration script to move successfully from v0.8 to v0.9. Read the "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/kyma-project/kyma/blob/release-0.9/docs/migration-guides/0.8-0.9.md"},"children":[{"type":"text","value":"Migration Guide"}]},{"type":"text","value":" for details."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Application Registry API can fetch generated client certificates"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We extended the Application Registry API with the possibility to fetch the generated client certificates. As soon as you register an API secured with the client certificate verification as a security mechanism, you can read this certificate with our API. Read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/components/application-connector/#tutorials-register-a-secured-api"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document for more information."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Apply details for the tenant and group name"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We extended the TokenRequest functionality and now you can apply details for the tenant name and group name. It allows you to easily manage the token generation process for pairing applications in the central Connector Service. For more details, read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/components/application-connector/#custom-resource-tokenrequest"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Read about the Root CA rotation procedure"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We updated our documentation with the description of the "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/master/components/application-connector/#tutorials-rotate-the-root-ca-certificate-and-key"},"children":[{"type":"text","value":"Root CA rotation procedure"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Acceptance tests for the Gateway Service"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We enhanced the Gateway Service with the extended set of acceptance tests, which increases our confidence in the stability and performance of the component."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Headers management"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We changed the Application Gateway proxy functionality and now the unnecessary headers, such as "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X-Forwarded-For"}]},{"type":"text","value":", are removed while making calls to external solutions. For the full list of removed headers, read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/master/components/application-connector/#architecture-application-gateway-handling-of-headers"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Console"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Documentation UI integrated with Headless CMS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Documentation UI, which you can access in the Console UI, is now integrated with the Headless CMS. This means you can extend the Documentation view, the one you see after clicking the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" icon, with your custom documentation topics as long as you have your docs written in Markdown and extended with additional metadata. The code snippet below is an example of a ClusterDocsTopic custom resource that will extend the Documentation UI navigation with a new element called "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Prometheus"}]},{"type":"text","value":" under a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Components"}]},{"type":"text","value":" heading. After clicking "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Prometheus"}]},{"type":"text","value":", you will see the official Prometheus documentation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"text","value":"cat <<EOF | kubectl apply -f -\napiVersion: cms.kyma-project.io/v1alpha1\nkind: ClusterDocsTopic\nmetadata:\n  labels:\n    cms.kyma-project.io/view-context: docs-ui\n    cms.kyma-project.io/group-name: components\n    cms.kyma-project.io/order: \"2\"\n  name: prometheus\nspec:\n  displayName: \"Prometheus\"\n  description: \"Some docs about Prometheus concepts\"\n  sources:\n    - type: markdown\n      name: docs\n      mode: package\n      url: https://github.com/prometheus/docs/archive/master.zip\n      filter: content/docs/concepts\nEOF\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Service Catalog related views integrated with Headless CMS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Service Catalog-related views now read documentation provided with the new Headless CMS. This means that you can easily provide documentation and specifications for any service that you want to share through the Service Catalog. See the example DocsTopic custom resourceâ€¯for artificial Service Class that exposes Slack APIs:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"text","value":"apiVersion: cms.kyma-project.io/v1alpha1\nkind: DocsTopic\nmetadata:\n  name: {$SERVICE_CLASS_ID}\n  labels:\n    cms.kyma-project.io/view-context: service-catalog\nspec:\n  displayName: Slack\n  description: \"Slack documentation\"\n  sources:\n    - type: markdown\n      name: markdown-doc\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/README.md\n    - type: asyncapi\n      name: events-api\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/events-api/slack_events_api_async_v1.json\n    - type: openapi\n      name: openapi-swagger\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Core and Supporting"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Headless CMS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Kyma, we value the content-as-code principle. It means that documentation is treated the same as code, as in the end, it is not much different. We decided to go one step further. If content is like code, why not deploy it into the Kubernetes cluster as code as well? If you can easily deploy a service using the Deployment resource, you can do the same with documentation. This is what we implemented - the Headless CMS, based on Kubernetes Custom Resource Definitions, that uses our other component, the "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/components/asset-store"},"children":[{"type":"text","value":"Asset Store"}]},{"type":"text","value":", for storage."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Headless CMS itself does not yet deliver any customizable UI interface that could be used to publish a standalone documentation portal. Nevertheless, we already use it in the Console UI. For more details, read the Headless CMS "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/master/components/headless-cms"},"children":[{"type":"text","value":"documentation"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Asset Store supports a webhook service that can enhance the status of the CR with additional metadata for each file"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can now extend the Asset Store status sub-resource with additional metadata information for each file created by the controller. To do so, create a separate service that implements REST API and accepts "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"multipart/form-data"}]},{"type":"text","value":". One of the use cases for such a service is to extract the front matter metadata provided in any file of the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"yaml"}]},{"type":"text","value":" format.\nSee the example AssetStore resource that contains information about the status modification webhook:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"text","value":"apiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  labels:\n    controller-tools.k8s.io: \"1.0\"\n  name: asset-sample\n  namespace: default\nspec:\n  bucketRef:\n    name: test-sample\n  source:\n    url: https://github.com/kyma-project/kyma/archive/0.8.1.zip\n    filter: /docs/service-catalog/docs/\n    mode: package\n    metadataWebhookService:\n    - name: assetstore-asset-metadata-service\n      namespace: kyma-system\n      endpoint: /v1/extract\n      filter: \\.md$\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To learn more about webhook services, read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/components/asset-store/#custom-resource-asset-validation-and-mutation-webhook-services"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Asset Store stack enhanced with a default service that can extract metadata from any file"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the support of the new metadata webhook, we added a default service to the Asset Store domain. You can use it to extract the front matter metadata provided in any file of the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"yaml"}]},{"type":"text","value":" format. We already use this service in the Headless CMS component. For more details, read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/master/components/asset-store/#details-asset-metadata-service"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Eventing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Kyma with Knative Eventing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Kyma now uses Knative Eventing backed by NATS Streaming by default. This is a big first step towards leveraging Knative Eventing capabilities in the upcoming releases."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Improved security"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Access to NATS Streaming is now restricted only to applications that store and read Events."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Alerting and monitoring added"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We added alerting and monitoring for eventing backing services."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Installation"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Xip.io wildcard as the default DNS solution"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The wildcard DNS provided by "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"xip.io"}]},{"type":"text","value":" is integrated as the default DNS solution, which means you can now install Kyma on GKE and AKS clusters and create a playground environment even easier. Simply start the installation on your cluster and don't worry about owning a domain or configuring your cluster in a specific way. If you want to spin up a production-ready cluster, the process doesn't change. When you provide your own domain and TLS certificates, the Installer uses them instead of these provided by "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"xip.io"}]},{"type":"text","value":". Additionally, all scenarios support Application Connectivity."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Test runner for the Kyma upgrade"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We created a test runner and a place for end-to-end upgrade tests executed by "},{"type":"element","tagName":"a","properties":{"href":"https://status.build.kyma-project.io/?job=post-master-kyma-gke-upgrade"},"children":[{"type":"text","value":"Kyma upgrade plan on CI"}]},{"type":"text","value":". The framework allows you to prepare the data and run tests against the prepared data. For more information on end-to-end upgrade tests, read "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/kyma-project/kyma/tree/master/tests/end-to-end/upgrade"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Monitoring"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Monitoring Stack version update"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We upgraded the entire Monitoring stack based on the Prometheus operator to the latest version. The upgraded components are Alertmanager v0.16.1, Prometheus Operator v0.29.0, Prometheus v2.7.1, and Grafana v6.0.1."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Security"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TLS in Tiller"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From this release, communication with Tiller requires a TLS certificate. For developers who install Kyma locally using Minikube, the start-up scripts automatically set certificates for Helm. However, from now on it is mandatory to add the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tls"}]},{"type":"text","value":" flag to every Helm command."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Helm Broker enforces TLS for external bundles repositories"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From now on, on your non-local clusters, you can use only servers with TLS enabled. All incorrect or unsecured URLs will be omitted. You can use unsecured URLs only on your local cluster. For more information, read "},{"type":"element","tagName":"a","properties":{"href":"https://kyma-project.io/docs/master/components/helm-broker/#configuration-configuration-configuration-rules"},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Istio with mutual TLS for the Service Catalog and Service Brokers"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We introduced Istio with mutual TLS for the Service Catalog and for all Service Brokers (the Helm Broker, Application Broker, and Azure Broker)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Service Mesh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Istio version update"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Kyma now uses Istio version 1.1."}]}],"data":{"quirksMode":false}},"rawMarkdownBody":"\nThe 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by `xip.io`. Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS.\n\n<!-- overview -->\n\nThe highlights of Kyma 0.9 Florence include:\n\n- [Knative-based eventing by default](#kyma-with-knative-eventing) - The eventing mechanism is now based on Knative by default.\n- [Xip.io wildcard as the default DNS solution](#installation) - We integrated the `xip.io` wildcard DNS as the default DNS solution.\n- [Headless CMS component introduced for the Console UI](#headless-cms) - We introduced the Headless CMS component that allows you to store and manage content, and expose it through an API.\n- [Updated Monitoring stack version](#monitoring-stack-version-update) - We updated the entire Monitoring stack.\n- [Improved upgrade process](#test-runner-for-the-kyma-upgrade) - We developed a testing framework that automates checking the state of Kyma components after the upgrade.\n\n\nSee the overview of all changes in this release:\n\n- [Application Connector](#application-connector) - Connector Service enhancements and extensions\n- [Console](#console) - Console views that display documentation use the new Headless CMS\n- [Core and Supporting](#core-and-supporting) - Kyma Headless CMS as the default solution for handling documentation\n- [Eventing](#eventing) - Knative Eventing enabled by default, improved security, alerting and monitoring added\n- [Installation](#installation) - `Xip.io` wildcard as the default DNS solution, test runner for the Kyma upgrade\n- [Monitoring](#monitoring) - Monitoring stack upgraded to the latest version\n- [Security](#security) - TLS in Tiller, external bundles repositories with TLS in the Helm Broker, Istio with mutual TLS for the Service Catalog and all Service Brokers\n- [Service Mesh](#service-mesh) - Upgrade to Istio 1.1\n\n---\n\n## Application Connector\n\n> **CAUTION:** To ensure the persistence of API services specifications, run the migration script to move successfully from v0.8 to v0.9. Read the [Migration Guide](https://github.com/kyma-project/kyma/blob/release-0.9/docs/migration-guides/0.8-0.9.md) for details.\n\n### Application Registry API can fetch generated client certificates\n\nWe extended the Application Registry API with the possibility to fetch the generated client certificates. As soon as you register an API secured with the client certificate verification as a security mechanism, you can read this certificate with our API. Read [this](https://kyma-project.io/docs/components/application-connector/#tutorials-register-a-secured-api) document for more information.\n\n### Apply details for the tenant and group name\n\nWe extended the TokenRequest functionality and now you can apply details for the tenant name and group name. It allows you to easily manage the token generation process for pairing applications in the central Connector Service. For more details, read [this](https://kyma-project.io/docs/components/application-connector/#custom-resource-tokenrequest) document.\n\n### Read about the Root CA rotation procedure\n\nWe updated our documentation with the description of the [Root CA rotation procedure](https://kyma-project.io/docs/master/components/application-connector/#tutorials-rotate-the-root-ca-certificate-and-key).\n\n### Acceptance tests for the Gateway Service\n\nWe enhanced the Gateway Service with the extended set of acceptance tests, which increases our confidence in the stability and performance of the component.\n\n### Headers management\n\nWe changed the Application Gateway proxy functionality and now the unnecessary headers, such as `X-Forwarded-For`, are removed while making calls to external solutions. For the full list of removed headers, read [this](https://kyma-project.io/docs/master/components/application-connector/#architecture-application-gateway-handling-of-headers) document.\n\n\n## Console\n\n### Documentation UI integrated with Headless CMS\n\nThe Documentation UI, which you can access in the Console UI, is now integrated with the Headless CMS. This means you can extend the Documentation view, the one you see after clicking the **?** icon, with your custom documentation topics as long as you have your docs written in Markdown and extended with additional metadata. The code snippet below is an example of a ClusterDocsTopic custom resource that will extend the Documentation UI navigation with a new element called **Prometheus** under a **Components** heading. After clicking **Prometheus**, you will see the official Prometheus documentation.\n\n```yaml\ncat <<EOF | kubectl apply -f -\napiVersion: cms.kyma-project.io/v1alpha1\nkind: ClusterDocsTopic\nmetadata:\n  labels:\n    cms.kyma-project.io/view-context: docs-ui\n    cms.kyma-project.io/group-name: components\n    cms.kyma-project.io/order: \"2\"\n  name: prometheus\nspec:\n  displayName: \"Prometheus\"\n  description: \"Some docs about Prometheus concepts\"\n  sources:\n    - type: markdown\n      name: docs\n      mode: package\n      url: https://github.com/prometheus/docs/archive/master.zip\n      filter: content/docs/concepts\nEOF\n```\n\n### Service Catalog related views integrated with Headless CMS\n\nThe Service Catalog-related views now read documentation provided with the new Headless CMS. This means that you can easily provide documentation and specifications for any service that you want to share through the Service Catalog. See the example DocsTopic custom resourceâ€¯for artificial Service Class that exposes Slack APIs:\n\n```yaml\napiVersion: cms.kyma-project.io/v1alpha1\nkind: DocsTopic\nmetadata:\n  name: {$SERVICE_CLASS_ID}\n  labels:\n    cms.kyma-project.io/view-context: service-catalog\nspec:\n  displayName: Slack\n  description: \"Slack documentation\"\n  sources:\n    - type: markdown\n      name: markdown-doc\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/README.md\n    - type: asyncapi\n      name: events-api\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/events-api/slack_events_api_async_v1.json\n    - type: openapi\n      name: openapi-swagger\n      mode: single\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json\n```\n\n## Core and Supporting\n\n### Headless CMS\n\nIn Kyma, we value the content-as-code principle. It means that documentation is treated the same as code, as in the end, it is not much different. We decided to go one step further. If content is like code, why not deploy it into the Kubernetes cluster as code as well? If you can easily deploy a service using the Deployment resource, you can do the same with documentation. This is what we implemented - the Headless CMS, based on Kubernetes Custom Resource Definitions, that uses our other component, the [Asset Store](https://kyma-project.io/docs/components/asset-store), for storage.\n\nThe Headless CMS itself does not yet deliver any customizable UI interface that could be used to publish a standalone documentation portal. Nevertheless, we already use it in the Console UI. For more details, read the Headless CMS [documentation](https://kyma-project.io/docs/master/components/headless-cms).\n\n### Asset Store supports a webhook service that can enhance the status of the CR with additional metadata for each file\n\nYou can now extend the Asset Store status sub-resource with additional metadata information for each file created by the controller. To do so, create a separate service that implements REST API and accepts `multipart/form-data`. One of the use cases for such a service is to extract the front matter metadata provided in any file of the `yaml` format.\nSee the example AssetStore resource that contains information about the status modification webhook:\n\n```yaml\napiVersion: assetstore.kyma-project.io/v1alpha2\nkind: Asset\nmetadata:\n  labels:\n    controller-tools.k8s.io: \"1.0\"\n  name: asset-sample\n  namespace: default\nspec:\n  bucketRef:\n    name: test-sample\n  source:\n    url: https://github.com/kyma-project/kyma/archive/0.8.1.zip\n    filter: /docs/service-catalog/docs/\n    mode: package\n    metadataWebhookService:\n    - name: assetstore-asset-metadata-service\n      namespace: kyma-system\n      endpoint: /v1/extract\n      filter: \\.md$\n```\n\nTo learn more about webhook services, read [this](https://kyma-project.io/docs/components/asset-store/#custom-resource-asset-validation-and-mutation-webhook-services) document.\n\n### Asset Store stack enhanced with a default service that can extract metadata from any file\n\nWith the support of the new metadata webhook, we added a default service to the Asset Store domain. You can use it to extract the front matter metadata provided in any file of the `yaml` format. We already use this service in the Headless CMS component. For more details, read [this](https://kyma-project.io/docs/master/components/asset-store/#details-asset-metadata-service) document.\n\n\n## Eventing\n\n### Kyma with Knative Eventing\n\nKyma now uses Knative Eventing backed by NATS Streaming by default. This is a big first step towards leveraging Knative Eventing capabilities in the upcoming releases.\n\n### Improved security\n\nAccess to NATS Streaming is now restricted only to applications that store and read Events.\n\n### Alerting and monitoring added\n\nWe added alerting and monitoring for eventing backing services.\n\n\n## Installation\n\n### Xip.io wildcard as the default DNS solution\n\nThe wildcard DNS provided by `xip.io` is integrated as the default DNS solution, which means you can now install Kyma on GKE and AKS clusters and create a playground environment even easier. Simply start the installation on your cluster and don't worry about owning a domain or configuring your cluster in a specific way. If you want to spin up a production-ready cluster, the process doesn't change. When you provide your own domain and TLS certificates, the Installer uses them instead of these provided by `xip.io`. Additionally, all scenarios support Application Connectivity.\n\n### Test runner for the Kyma upgrade\n\nWe created a test runner and a place for end-to-end upgrade tests executed by [Kyma upgrade plan on CI](https://status.build.kyma-project.io/?job=post-master-kyma-gke-upgrade). The framework allows you to prepare the data and run tests against the prepared data. For more information on end-to-end upgrade tests, read [this](https://github.com/kyma-project/kyma/tree/master/tests/end-to-end/upgrade) document.\n\n\n## Monitoring\n\n### Monitoring Stack version update\n\nWe upgraded the entire Monitoring stack based on the Prometheus operator to the latest version. The upgraded components are Alertmanager v0.16.1, Prometheus Operator v0.29.0, Prometheus v2.7.1, and Grafana v6.0.1.\n\n\n## Security\n\n### TLS in Tiller\n\nFrom this release, communication with Tiller requires a TLS certificate. For developers who install Kyma locally using Minikube, the start-up scripts automatically set certificates for Helm. However, from now on it is mandatory to add the `--tls` flag to every Helm command.\n\n### Helm Broker enforces TLS for external bundles repositories\n\nFrom now on, on your non-local clusters, you can use only servers with TLS enabled. All incorrect or unsecured URLs will be omitted. You can use unsecured URLs only on your local cluster. For more information, read [this](https://kyma-project.io/docs/master/components/helm-broker/#configuration-configuration-configuration-rules) document.\n\n### Istio with mutual TLS for the Service Catalog and Service Brokers\n\nWe introduced Istio with mutual TLS for the Service Catalog and for all Service Brokers (the Helm Broker, Application Broker, and Azure Broker).\n\n\n## Service Mesh\n\n### Istio version update\n\nKyma now uses Istio version 1.1.\n","excerpt":"\nThe 0.9 release comes with many updates and improvements, as well as some brand new features that make the Kyma experience even smoother. The Kyma-Knative integration has reached its peak and from this release, Knative Eventing is the default eventing mechanism. You can now install Kyma on GKE and AKS clusters using the default DNS solution provided by `xip.io`. Among many updates and improvements, we developed a new testing framework and updated the entire Monitoring stack. Last but not least, we introduced a brand new component for storing and managing content - the Headless CMS.\n\n","fields":{"slug":"/blog/2019/4/8/release-notes-09","date":"April 09, 2019","postInfo":{"year":2019,"month":4,"day":8}},"frontmatter":{"title":"Kyma 0.9 Florence","author":{"name":"Klaudia Grzondziel, Technical Writer @Kyma"},"tags":["release-notes"],"type":"release","releaseTag":"0.9.0"}}},"pageContext":{"slug":"/blog/2019/4/8/release-notes-09","assetsPath":"/assets/blog-posts/2019-04-08-release-notes-0.9/","previous":{"fields":{"slug":"/blog/2019/3/27/wg-knative-closure","assetsPath":"/assets/blog-posts/2019-03-27-wg-knative-closure/","postInfo":{"fileName":"wg-knative-closure"}},"frontmatter":{"title":"Knative Working Group closed","redirectFrom":["/blog/wg-knative-closed"]}},"next":null,"locale":"en"}}