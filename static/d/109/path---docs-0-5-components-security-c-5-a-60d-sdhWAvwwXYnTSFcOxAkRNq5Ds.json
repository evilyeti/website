{"pageContext":{"version":"0.5","versions":{"releases":["1.0","0.9","0.8","0.7","0.6","0.5","0.4"],"prereleases":["1.1"],"branches":["master"]},"content":{"id":"security","displayName":"Security","description":"Security in Kyma","type":"components","docs":[{"order":"001-overview-authorization-and-authentication","title":"Overview","source":"\nThe security model in Kyma uses the Service Mesh component to enforce authorization through [Kubernetes Role Based Authentication](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) (RBAC) in the cluster. The identity federation is managed through [Dex](https://github.com/coreos/dex), which is an open-source, OpenID Connect identity provider.\n\nDex implements a system of connectors that allow you to delegate authentication to external OpenID Connect and SAML2-compliant Identity Providers and use their user stores. Read the **Add an Identity Provider to Dex** document to learn how to enable authentication with an external Identity Provider by using a Dex connector.\n\nOut of the box, Kyma comes with its own static user store used by Dex to authenticate users. This solution is designed for use with local Kyma deployments as it allows to easily create predefined users' credentials by creating Secret objects with a custom `dex-user-config` label.\nRead the **Manage static users in Dex** document to learn how to manage users in the static store used by Dex.\n\nKyma uses a group-based approach to managing authorizations.\nTo give users that belong to a group access to resources in Kyma, you must create:\n\n- Role and RoleBinding - for resources in a given Namespace or Environment.\n- ClusterRole and ClusterRoleBinding - for resources available in the entire cluster.\n\nThe RoleBinding or ClusterRoleBinding must have a group specified as their subject.\nSee [this](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) document to learn how to manage Roles and RoleBindings.\n\n>**NOTE:** You cannot define groups for the static user store. Instead, bind the user directly to a role or a cluster role by setting the user as the subject of a RoleBinding or ClusterRoleBinding.\n\nThe system creates two default roles in every Environment:\n- `kyma-admin-role` - this role gives the user full access to the Environment.\n- `kyma-reader-role` - this role gives the user the right to read all resources in the given Environment.\n\nFor more details about Environments, read the **Environments** document in the **Kyma** topic.\n\n>**NOTE:** The **Global permissions** section in the **Administration** view of the Kyma Console UI allows you to manage user-group bindings.\n"},{"order":"003-architecture-auth","title":"Architecture","source":"\nThe following diagram illustrates the authorization and authentication flow in Kyma. The representation assumes the Kyma Console UI as the user's point of entry.\n\n![authorization-authentication-flow](./assets/001-kyma-authorization.svg)\n\n1. The user opens the Kyma Console UI. If the Console application doesn't find a JWT token in the browser session storage, it redirects the user's browser to the Open ID Connect (OIDC) provider, Dex.\n2. Dex lists all defined Identity Provider connectors to the user. The user selects the Identity Provider to authenticate with. After successful authentication, the browser is redirected back to the OIDC provider which issues a JWT token to the user. After obtaining the token, the browser is redirected back to the Console UI. The Console UI stores the token in the Session Storage and uses it for all subsequent requests.\n3. The Authorization Proxy validates the JWT token passed in the **Authorization Bearer** request header. It extracts the user and groups details, the requested resource path, and the request method from the token. The Proxy uses this data to build an attributes record, which it sends to the Kubernetes Authorization API.\n4. The Proxy sends the attributes record to the Kubernetes Authorization API. If the authorization fails, the flow ends with a `403` code response.\n5. If the authorization succeeds, the request is forwarded to the Kubernetes API Server.  \n\n>**NOTE:** The Authorization Proxy can verify JWT tokens issued by Dex because Dex is registered as a trusted issuer through OIDC parameters during the Kyma installation.  \n"},{"order":"004-details-kubecofig-generator","title":"Kubeconfig generator","source":"\nThe Kubeconfig generator is a proprietary tool that generates a `kubeconfig` file which allows the user to access the Kyma cluster through the Command Line Interface (CLI), and to manage the connected cluster within the permission boundaries of the user.\n\nThe Kubeconfig generator rewrites the ID token issued for the user by Dex into the generated `kubeconfig` file. The time to live (TTL) of the ID token is 24 hours, which effectively means that the TTL of the generated `kubeconfig` file is 24 hours as well.\n\nThe generator is a publicly exposed service. You can access it directly under the `https://configurations-generator.{YOUR_CLUSTER_DOMAIN}` address. The service requires a valid ID token issued by Dex to return a code `200` result.\n\n## Get the kubeconfig file and configure the CLI\n\nFollow these steps to get the `kubeconfig` file and configure the CLI to connect to the cluster:\n\n1. Access the Console UI of your Kyma cluster.\n2. Click **Administration**.\n3. Click the **Download config** button to download the `kubeconfig` file to a selected location on your machine.\n4. Open a terminal window.\n5. Export the `KUBECONFIG` environment variable to point to the downloaded `kubeconfig`. Run this command:\n  ```\n  export KUBECONFIG={path_to_downloaded_kubeconfig}\n  ```\n  >**NOTE:** Drag and drop the `kubeconfig` file in the terminal to easily add the path of the file to the `export KUBECONFIG` command you run.\n\n6. Run `kubectl cluster-info` to check if the CLI is connected to the correct cluster.\n\n>**NOTE:** Exporting the `KUBECONFIG` environment variable works only in the context of the given terminal window. If you close the window in which you exported the variable, or if you switch to a new terminal window, you must export the environment variable again to connect the CLI to the desired cluster.\n\nAlternatively, get the `kubeconfig` file by sending a `GET` request with a valid ID token issued for the user to the `/kube-config` endpoint of the `https://configurations-generator.{YOUR_CLUSTER_DOMAIN}` service. For example:\n```\ncurl GET https://configurations-generator.{YOUR_CLUSTER_DOMAIN}/kube-config -H \"Authorization: Bearer {VALID_ID_TOKEN}\"\n```\n","type":"Details"},{"order":"005-details-add-connector","title":"Add an Identity Provider to Dex","source":"\nAdd external, OpenID Connect compliant authentication providers to Kyma using [Dex connectors](https://github.com/coreos/dex#connectors). Follow the instructions below to add a GitHub connector and use it to authenticate users in Kyma.\n\n>**NOTE:** Groups in the Github are represented as teams. See [this](https://help.github.com/articles/organizing-members-into-teams/) document to learn how to manage teams in Github.\n\n## Prerequisites\n\nTo add a GitHub connector to Dex, [register](https://github.com/settings/applications/new) a new OAuth application in GitHub. Set the authorization callback URL to `https://dex.kyma.local/callback`.\nAfter you complete the registration, [request](https://help.github.com/articles/requesting-organization-approval-for-oauth-apps/) for an organization approval.\n\n>**NOTE:** To authenticate in Kyma using GitHub, the user must be a member of a GitHub [organization](https://help.github.com/articles/creating-a-new-organization-from-scratch/) that has at least one [team](https://help.github.com/articles/creating-a-team/).\n\n## Configure Dex\n\nRegister the GitHub Dex connector by editing the `dex-config-map.yaml` ConfigMap file located in the `kyma/resources/dex/templates` directory. Follow this template:\n\n```\n    connectors:\n    - type: github\n      id: github\n      name: GitHub\n      config:\n        clientID: {GITHUB_CLIENT_ID}\n        clientSecret: {GITHUB_CLIENT_SECRET}\n        redirectURI: https://dex.kyma.local/callback\n        orgs:\n          - name: {GITHUB_ORGANIZATION}\n```\n\nThis table explains the placeholders used in the template:\n\n|Placeholder | Description |\n|---|---|\n| GITHUB_CLIENT_ID | Specifies the application's client ID. |\n| GITHUB_CLIENT_SECRET | Specifies the application's client Secret. |\n| GITHUB_ORGANIZATION | Specifies the name of the GitHub organization. |\n\n## Configure authorization rules\n\nTo bind Github groups to the default roles added to every Kyma Environment, add the **bindings** section to [this](https://github.com/kyma-project/kyma/blob/master/resources/core/charts/cluster-users/values.yaml) file. Follow this template:\n\n```\nbindings:\n  kymaAdmin:\n    groups:\n    - \"{GITHUB_ORGANIZATION}:{GITHUB_TEAM_A}\"\n  kymaView:\n    groups:\n    - \"{GITHUB_ORGANIZATION}:{GITHUB_TEAM_B}\"\n```\n\nThis table explains the placeholders used in the template:\n\n|Placeholder | Description |\n|---|---|\n| GITHUB_ORGANIZATION | Specifies the name of the GitHub organization. |\n| GITHUB_TEAM_A | Specifies the name of GitHub team to bind to the `kyma-admin-role` role. |\n| GITHUB_TEAM_B | Specifies the name of GitHub team to bind to the `kyma-reader-role` role. |\n","type":"Details"},{"order":"006-details-manage-static-users","title":"Manage static users in Dex","source":"\nTo create a static user in Dex, create a Secret with the **dex-user-config** label set to `true`. Run: \n\n```\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\nmetadata:\n  name:  {SECRET_NAME}\n  namespace: {SECRET_NAMESPACE}\n  labels:\n    \"dex-user-config\": \"true\"\ndata:\n  email: {BASE64_USER_EMAIL}\n  username: {BASE64_USERNAME}\n  password: {BASE64_USER_PASSWORD}  \ntype: Opaque\nEOF\n```\nThe following table describes the fields that are mandatory to create a static user. If any of these fields is not included, the user is not created. \n\n|Field | Description |\n|---|---|\n| data.email | Base64-encoded email address used to sign-in to the console UI. Must be unique. |\n| data.username | Base64-encoded username displayed in the console UI. |\n| data.password | Base64-encoded user password. There are no specific requirements regarding password strength, but it is recommended to use a password that is at least 8-characters-long. |\n\nCreate the Secrets in the cluster before Dex is installed. The Dex init-container with the tool that configures Dex generates user configuration data basing on properly labelled Secrets, and adds the data to the ConfigMap.\n\nIf you want to add a new static user after Dex is installed, restart the Dex Pod. This creates a new Pod with an updated ConfigMap.\n","type":"Details"},{"order":"020-update-tls-certificates","title":"Update TLS certificate","source":"\nThe TLS certificate is a vital security element. This document describes how to update the TLS certificate in Kyma.\n\n>**NOTE:** This procedure can interrupt the communication between your cluster and the outside world for a limited \nperiod of time.\n\n## Prerequisites\n * New TLS certificates\n * Kyma administrator access \n\n## Steps\n\n1. Export the new TLS certificate and key as environment variables. Run:\n\n    ```bash\n    export KYMA_TLS_CERT=$(cat {NEW_CERT_PATH})\n    export KYMA_TLS_KEY=$(cat {NEW_KEY_PATH})\n    ```\n\n2. Update the Ingress Gateway certificate. Run:\n\n    ```bash\n    cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Secret\n    type: kubernetes.io/tls\n    metadata:\n        name: istio-ingressgateway-certs\n        namespace: istio-system\n    data:\n        tls.crt: $(echo \"$KYMA_TLS_CERT\" | base64)\n        tls.key: $(echo \"$KYMA_TLS_KEY\" | base64)\n    EOF\n    ```\n \n3. Update the `kyma-system` Namespace certificate:\n\n    ```bash\n    cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Secret\n    type: Opaque\n    metadata:\n        name: ingress-tls-cert\n        namespace: kyma-system\n    data:\n        tls.crt: $(echo \"$KYMA_TLS_CERT\" | base64)\n    EOF\n    ```\n    \n4. Update the `kyma-integration` Namespace certificate:\n\n    ```bash\n    cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Secret\n    type: Opaque\n    metadata:\n        name: ingress-tls-cert\n        namespace: kyma-integration\n    data:\n        tls.crt: $(echo \"$KYMA_TLS_CERT\" | base64)\n    EOF\n    ```\n\n5. Restart the Ingress Gateway Pod to apply the new certificate:\n\n    ```bash\n    kubectl delete pod -l app=istio-ingressgateway -n istio-system\n    ```\n    \n6. Restart the Pods in the `kyma-system` Namespace to apply the new certificate:\n\n    ```bash\n    kubectl delete pod -l tlsSecret=ingress-tls-cert -n kyma-system\n    ```\n    \n7. Restart the Pods in the `kyma-integration` Namespace to apply the new certificate:\n\n    ```bash\n    kubectl delete pod -l tlsSecret=ingress-tls-cert -n kyma-integration\n    ```\n","type":"Details"},{"order":"011-cr-groups","title":"Group","source":"\nThe `groups.authentication.kyma-project.io` Custom Resource Definition (CRD) is a detailed description of the kind of data and the format that represents user groups available in the ID provider in the Kyma cluster. To get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```\nkubectl get crd groups.authentication.kyma-project.io -o yaml\n```\n\n## Sample Custom Resource\n\nThis is a sample CR that represents an user group available in the ID provider in the Kyma cluster.\n\n```\napiVersion: authentication.kyma-project.io/v1alpha1\nkind: Group\nmetadata:\n    name: \"sample-group\"\nspec:    \n    name: \"admins\"\n    idpName: \"github\"\n    description: \"'admins' represents the group of users with administrative privileges in the organization.\"\n```\n\nThis table analyses the elements of the sample CR and the information it contains:\n\n\n| Field   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR. |\n| **spec.name** | **YES** | Specifies the name of the group. |\n| **spec.idpName** | **YES** | Specifies the name of the ID provider in which the group exists. |\n| **spec.description** | **NO** | Description of the group available in the ID provider. |\n","type":"Custom Resource"},{"order":"012-cr-idppresets","title":"Identity Provider Presets","source":"\nThe `idppresets.authentication.kyma-project.io` Custom Resource Definition (CRD) is a detailed description of the kind of data and the format that represents presets of the Identity Provider configuration used to secure API through the Console UI. Presets are a convenient way to configure the **authentication** section in the API Custom Resource.\n\nTo get the up-to-date CRD and show the output in the `yaml` format, run this command:\n\n```bash\nkubectl get crd idppresets.authentication.kyma-project.io -o yaml\n```\n\n## Sample Custom Resource\n\nThis is a sample CR used to create an IDPPreset:\n\n```yaml\napiVersion: authentication.kyma-project.io/v1alpha1\nkind: IDPPreset\nmetadata:\n    name: \"sample-idppreset\"\nspec:\n    issuer: https://example.com\n    jwksUri: https://example.com/keys\n```\n\n## Custom resource parameters\n\nThis table lists all the possible parameters of a given resource together with their descriptions:\n\n| Parameter   |      Mandatory      |  Description |\n|:----------:|:-------------:|:------|\n| **metadata.name** |    **YES**   | Specifies the name of the CR. |\n| **spec.issuer** | **YES** | Specifies the issuer of the JWT tokens used to access the services. |\n| **spec.jwksUri** | **YES** | Specifies the URL of the OpenID Provider’s public key set to validate the signature of the JWT token. |\n\n## Usage in the UI\n\n**issuer** and **jwksUri** are some of the API CR specification fields. In most cases, these values are reused many times. IDPPresets usage is a solution to reuse them in a convenient way. It allows you to choose a proper preset from the dropdown menu instead of entering them manually every time you expose a secured API. Apart from consuming the IDPPresets, you can also manage them in the Console UI. To create and delete IDPPresets, go to the **Administration** tab and then to **IDP Presets**.\n\n## Related resources and components\n\nThese components use this CR:\n\n| Name   |   Description |\n|:----------:|:------|\n| IDP Preset |  Generates Go client which allows components and tests to create, delete, or get IDP Preset resources. |\n| UI API Layer |  Enables the IDP Preset management with GraphQL API. |","type":"Custom Resource"}]},"navigation":{"topics":[{"id":"kyma","contentType":"root","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"In a nutshell","anchor":"in-a-nutshell"},{"name":"Main features","anchor":"main-features"},{"name":"Technology stack","anchor":"technology-stack"},{"name":"Key components","anchor":"key-components"},{"name":"Kyma and Knative - brothers in arms","anchor":"kyma-and-knative---brothers-in-arms"},{"name":"How to start","anchor":"how-to-start"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Components","anchor":"components"},{"name":"Environments","anchor":"environments"},{"name":"Testing Kyma","anchor":"testing-kyma"},{"name":"Charts","anchor":"charts"},{"name":"Deploy with a private Docker registry","anchor":"deploy-with-a-private-docker-registry"}]},{"topicType":"Installation","name":"Installation","anchor":"installation","titles":[{"name":"Install Kyma locally from the release","anchor":"install-kyma-locally-from-the-release"},{"name":"Install Kyma locally from sources","anchor":"install-kyma-locally-from-sources"},{"name":"Install Kyma on a GKE cluster","anchor":"install-kyma-on-a-gke-cluster"},{"name":"Local installation scripts","anchor":"local-installation-scripts"},{"name":"Install subcomponents","anchor":"install-subcomponents"},{"name":"Reinstall Kyma","anchor":"reinstall-kyma"},{"name":"Installation with custom Istio deployment","anchor":"installation-with-custom-istio-deployment"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Sample service deployment on local","anchor":"sample-service-deployment-on-local"},{"name":"Sample service deployment on a cluster","anchor":"sample-service-deployment-on-a-cluster"},{"name":"Develop a service locally without using Docker","anchor":"develop-a-service-locally-without-using-docker"},{"name":"Publish a service Docker image and deploy it to Kyma","anchor":"publish-a-service-docker-image-and-deploy-it-to-kyma"},{"name":"Helm overrides for Kyma installation","anchor":"helm-overrides-for-kyma-installation"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Installation","anchor":"installation"}]}]},{"id":"security","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Kubeconfig generator","anchor":"kubeconfig-generator"},{"name":"Add an Identity Provider to Dex","anchor":"add-an-identity-provider-to-dex"},{"name":"Manage static users in Dex","anchor":"manage-static-users-in-dex"},{"name":"Update TLS certificate","anchor":"update-tls-certificate"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Group","anchor":"group"},{"name":"Identity Provider Presets","anchor":"identity-provider-presets"}]}]},{"id":"service-catalog","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Resources","anchor":"resources"},{"name":"Add a service to the Catalog","anchor":"add-a-service-to-the-catalog"},{"name":"Provisioning and binding","anchor":"provisioning-and-binding"},{"name":"Etcd Database","anchor":"etcd-database"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"ServiceBindingUsage","anchor":"servicebindingusage"},{"name":"UsageKind","anchor":"usagekind"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Register a ClusterServiceBroker","anchor":"register-a-clusterservicebroker"}]}]},{"id":"service-brokers","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"},{"name":"Azure Broker","anchor":"azure-broker"},{"name":"Remote Environment Broker","anchor":"remote-environment-broker"},{"name":"Helm Broker","anchor":"helm-broker"}]},{"topicType":"Configuration","name":"Configuration","anchor":"configuration","titles":[{"name":"Configure Helm Broker","anchor":"configure-helm-broker"},{"name":"How to create a bundle","anchor":"how-to-create-a-bundle"},{"name":"Binding bundles","anchor":"binding-bundles"},{"name":"Enable the Azure Broker for local deployment","anchor":"enable-the-azure-broker-for-local-deployment"}]},{"topicType":"Architecture","name":"Architecture","anchor":"architecture","titles":[{"name":"The Remote Environment Broker architecture","anchor":"the-remote-environment-broker-architecture"},{"name":"Helm Broker architecture","anchor":"helm-broker-architecture"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"EventActivation","anchor":"eventactivation"}]}]},{"id":"application-connector","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Architecture","name":"Architecture","anchor":"architecture","titles":[{"name":"Application Connector components","anchor":"application-connector-components"},{"name":"Connector Service","anchor":"connector-service"},{"name":"Proxy Service","anchor":"proxy-service"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"},{"name":"Access the Application Connector on a local Kyma deployment","anchor":"access-the-application-connector-on-a-local-kyma-deployment"},{"name":"Consume applications through the Service Catalog","anchor":"consume-applications-through-the-service-catalog"},{"name":"Metadata Service","anchor":"metadata-service"},{"name":"Pass an access token in a request header","anchor":"pass-an-access-token-in-a-request-header"}]},{"topicType":"API","name":"API","anchor":"api","titles":[{"name":"Connector Service","anchor":"connector-service"},{"name":"Metadata Service","anchor":"metadata-service"},{"name":"Event Service","anchor":"event-service"}]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Create a new Remote Environment","anchor":"create-a-new-remote-environment"},{"name":"Get the client certificate","anchor":"get-the-client-certificate"},{"name":"Register a service","anchor":"register-a-service"},{"name":"Bind a Remote Environment to an Environment","anchor":"bind-a-remote-environment-to-an-environment"},{"name":"Trigger a lambda with events","anchor":"trigger-a-lambda-with-events"},{"name":"Call a registered external service from Kyma","anchor":"call-a-registered-external-service-from-kyma"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"RemoteEnvironment","anchor":"remoteenvironment"},{"name":"EnvironmentMapping","anchor":"environmentmapping"}]}]},{"id":"event-bus","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Basic concepts","anchor":"basic-concepts"},{"name":"Event flow requirements","anchor":"event-flow-requirements"},{"name":"Service Programming Model","anchor":"service-programming-model"},{"name":"Troubleshooting","anchor":"troubleshooting"},{"name":"Subscription updates","anchor":"subscription-updates"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Subscription","anchor":"subscription"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"service-mesh","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Sidecar Proxy Injection","anchor":"sidecar-proxy-injection"},{"name":"Istio patch","anchor":"istio-patch"}]}]},{"id":"serverless","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Custom Resources","anchor":"custom-resources"},{"name":"Managing Lambdas","anchor":"managing-lambdas"},{"name":"The Node.js Programming Model","anchor":"the-node.js-programming-model"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"monitoring","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Getting Started","name":"Getting Started","anchor":"getting-started","titles":[{"name":"Expose custom metrics in Kyma","anchor":"expose-custom-metrics-in-kyma"}]}]},{"id":"tracing","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Propagate HTTP headers","anchor":"propagate-http-headers"},{"name":"Trace Comparison","anchor":"trace-comparison"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]}]},{"id":"api-gateway","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Api","anchor":"api"}]}]},{"id":"logging","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Access OK Log","anchor":"access-ok-log"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]}]},{"id":"console","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"UI extensibility","anchor":"ui-extensibility"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"MicroFrontend","anchor":"microfrontend"},{"name":"ClusterMicroFrontend","anchor":"clustermicrofrontend"}]}]}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Service Brokers","id":"service-brokers"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Console","id":"console"}]},"assetsPath":"/assets/docs/0.5/security/docs/assets/","locale":"en"}}