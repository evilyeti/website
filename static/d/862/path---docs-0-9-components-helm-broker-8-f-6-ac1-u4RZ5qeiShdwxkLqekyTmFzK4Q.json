{"pageContext":{"version":"0.9","versions":{"releases":["0.9","0.8","0.7","0.6","0.5","0.4"],"prereleases":["1.0"],"branches":["master"]},"content":{"id":"helm-broker","displayName":"Helm Broker","description":"Overall documentation for the Helm Broker","type":"components","docs":[{"order":"01-01-helm-broker","title":"Overview","source":"\nThe Helm Broker is a [Service Broker](/docs/0.9/components/service-catalog/#service-brokers-overview) which exposes Helm charts as Service Classes in the Service Catalog. To do so, the Helm Broker uses the concept of bundles. Bundles are abstraction layers over Helm charts which provide all necessary information to convert the charts into Service Classes.\n\nThe Helm Broker fetches bundles which contain a set of specific [files](#details-create-a-bundle). You must place your bundles in a repository of an appropriate [format](#details-create-a-bundles-repository). By default, the Helm Broker fetches bundles from the release of the [`bundles`](https://github.com/kyma-project/bundles/releases) repository. You can also [configure](#configuration-configuration) the Helm Broker to fetch bundle definitions from any remote HTTP server.\n\nIn Kyma, you can use bundles to install the following Service Brokers:\n\n* [Google Cloud Platform (GCP) Broker](/docs/0.9/components/service-catalog/#service-brokers-gcp-broker)\n* [Azure Service Broker](/docs/0.9/components/service-catalog/#service-brokers-azure-service-broker)\n\nTo get all the bundles that the Helm Broker provides, go to the [`bundles`](https://github.com/kyma-project/bundles) repository.\n\nThe Helm Broker implements the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata) (OSB API).\nTo be compliant with the Service Catalog version used in Kyma, the Helm Broker supports only the following OSB API versions:\n- v2.13\n- v2.12\n- v2.11\n\n> **NOTE:** The Helm Broker does not implement the OSB API update operation.\n"},{"order":"02-01-helm-broker","title":"Architecture","source":"\nThe Helm Broker workflow starts with the registration process, during which the Helm Broker fetches bundles from the Kyma [`bundles`](https://github.com/kyma-project/bundles) repository, or from a remote HTTPS server.\n\n### Registration process\n\nThe registration process consists of the following steps:\n1. The Helm Broker fetches bundles.\n2. The Helm Broker registers bundles as Service Classes in the Service Catalog.\n\n![Helm Broker registration](./assets/hb-registration.svg)\n\n### Bundles provisioning and binding\n\nAfter the registration, you can provision and bind your bundles. Follow these steps:\n\n1. Select a given bundle Service Class from the Service Catalog.\n2. Provision this Service Class by creating its ServiceInstance in a given Namespace.\n3. Bind your ServiceInstance to a service or lambda.\n4. The service or lambda calls a given bundle.\n\n![Helm Broker architecture](./assets/hb-architecture.svg)\n"},{"order":"03-01-create-bundles","title":"Create a bundle","source":"\nBundles which the Helm Broker uses must have a specific structure. These are all possible files that you can include in your bundle:\n\n```\nsample-bundle/\n  ├── meta.yaml                             # [REQUIRED] A file which contains metadata information about this bundle\n  ├── chart/                                # [REQUIRED] A directory which contains a Helm chart that installs your Kubernetes resources\n  │    └── {chart-name}/                    # [REQUIRED] A Helm chart directory\n  │         └── ....                        # [REQUIRED] Helm chart files   \n  └── plans/                                # [REQUIRED] A directory which contains the possible plans for an installed chart\n       ├── example-enterprise               # [REQUIRED] A directory which contains files for a specific plan\n       │   ├── meta.yaml                    # [REQUIRED] A file which contains metadata information about this plan\n       │   ├── bind.yaml                    # A file which contains information required to bind this plan\n       │   ├── create-instance-schema.json  # JSON schema definitions for creating a ServiceInstance\n       │   ├── bind-instance-schema.json    # JSON schema definitions for binding a ServiceInstance\n       │   ├── update-instance-schema.json  # JSON schema definitions for updating a ServiceInstance\n       │   └── values.yaml                  # Default configuration values in this plan for a chart defined in the `chart` directory\n       └── ....\n```\n\n> **NOTE:** All file names in a bundle repository are case-sensitive.\n\nFor details about particular files, read the following sections.\n\n## meta.yaml file\n\nThe `meta.yaml` file contains information about the bundle. Define the following fields to create a service object which complies with the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object).\n\n|      Field Name     | Required |                   Description             |\n|-------------------|:--------:|----------------------------------------------|\n|         **name**        |   YES   | The name of the bundle.  |\n|       **version**       |   YES   | The version of the bundle. It is a broker service identifier.  |\n|          **id**         |   YES   | The broker service identifier.  |\n|     **description**     |   YES   | The short description of the service. |\n|     **displayName**     |   YES   | The display name of the bundle.    |\n|         **tags**        |   NO  | Keywords describing the provided service, separated by commas.     |\n|       **bindable**      |   NO  | The field that specifies whether you can bind a given bundle. |\n| **providerDisplayName** |   NO  | The name of the upstream entity providing the actual service.  |\n|   **longDescription**   |   NO  | The long description of the service.     |\n|   **documentationURL**  |   NO  | The link to the documentation page for the service.        |\n|      **supportURL**     |   NO  | The link to the support page for the service.     |\n|       **imageURL**      |   NO  | The URL to an image. You must provide the image in the `SVG` format.          |\n|       **labels**        |   NO  | Key-value pairs that help you to organize your project. Use labels to indicate different elements, such as Namespaces, services, or teams.   |\n| **bindingsRetrievable** |   NO  | The field that specifies whether fetching a ServiceBinding using a GET request on the resource's endpoint is supported for all plans. The default value is `false`.   |\n|   **planUpdatable**     |   NO  |  The field that specifies whether instances of this service can be updated to a different plan. The default value is `false`  |\n|       **requires**      |   NO  | The list of permissions the user must grant to the instances of this service. |\n| **provisionOnlyOnce**   |   NO  | The field that specifies whether the bundle can be provisioned only once in a given Namespace. The default value is `false`. |\n\n> **NOTE**: The **provisionOnlyOnce** and **local** keys are reserved and cannot be added to the **labels** entry, since the Helm Broker overrides them at runtime. The Helm Broker always adds the `local:true` label and it adds the `provisionOnlyOnce:true` label only if **provisionOnlyOnce** is set to `true`.\n\n## chart directory\n\nIn the `chart` directory, create a folder with the same name as your chart. Put all the files related to your chart in this folder. The system supports Helm version 2.6.\n\n> **NOTE:** The Helm Broker uses the [helm wait](https://github.com/kubernetes/helm/blob/release-2.6/docs/using_helm.md#helpful-options-for-installupgraderollback) option to ensure that all the resources that a chart creates are available. If you set your Deployment **replicas** to `1`, you must set **maxUnavailable** to `0` as a part of the rolling update strategy.\n\n## plans directory\n\nThe `plans` directory must contain at least one plan. Each plan must contain the `meta.yaml` file. Other files are not mandatory.\n\n* `meta.yaml` file - contains information about a given plan. Define the following fields to create a plan object which complies with the [Open Service Broker API](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object).\n\n|  Field Name | Required |      Description               |\n|-----------|:--------:|------------------------------------|\n|     **name**    |   YES   |     The name of the plan.   |\n|      **id**     |   YES   |     The ID of the plan. |\n| **description** |   YES   | The description of the plan. |\n| **displayName** |   YES   | The display name of the plan. |\n|  **bindable**   |   NO  | The field that specifies whether you can bind an instance of the plan or not. The default value is `false`. |\n|     **free**    |   NO  | The attribute which specifies whether an instance of the plan is free or not. The default value is `false`.    |\n\n* `bind.yaml` file - contains information about binding in a specific plan. If you define in the `meta.yaml` file that your plan is bindable, you must also create a `bind.yaml` file. For more information about this file, see [this](#details-bind-bundles) document.\n\n* `values.yaml` file - provides the default configuration values in a given plan for the chart definition located in the `chart` directory. For more information, see the [values files](https://github.com/kubernetes/helm/blob/release-2.6/docs/chart_template_guide/values_files.md) specification.\n\n* `create-instance-schema.json` file - contains a schema that defines parameters for a provision operation of a ServiceInstance. Each input parameter is expressed as a property within a JSON object.\n\n* `update-instance-schema.json` file - contains a schema that defines parameters for an update operation of a ServiceInstance. Each input parameter is expressed as a property within a JSON object.\n\n* `bind-instance-schema.json` file - contains a schema that defines parameters for a bind operation. Each input parameter is expressed as a property within a JSON object.\n\n>**NOTE:** For more information about schemas, see [this](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#schemas-object) specification.\n\n## Troubleshooting\n\nUse the dry run mode to check the generated manifests of the chart without installing it.\nThe `--debug` option prints the generated manifests.\nAs a prerequisite, you must install [Helm](https://github.com/kubernetes/helm) on your machine to run this command:\n\n```\n helm install --dry-run {path-to-chart} --debug\n```\nFor more details, read the Helm [official documentation](https://docs.helm.sh/chart_template_guide/#debugging-templates).\n","type":"Details"},{"order":"03-02-bind-bundles","title":"Bind bundles","source":"\nIf you defined in the `meta.yaml` file that your plan is bindable, you must also create a `bind.yaml` file.\nThe `bind.yaml` file supports the Service Catalog binding concept. It is mandatory for all bindable plans as it contains information needed during the binding process. Currently, Kyma supports only the [credentials-type binding](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#types-of-binding).   \n\n>**NOTE:** Resolving the values from the `bind.yaml` file is a post-provision action. If this operation ends with an error, the provisioning also fails.\n\nIn the `bind.yaml` file, you can use the Helm chart templates directives. See the example:\n\n```yaml\n# bind.yaml\ncredential:\n  - name: HOST\n    value: {{ template \"redis.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local\n{{- if .Values.usePassword }}\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: {{ template \"redis.fullname\" . }}\n        key: redis-password\n{{- end }}\n```\nIn this example, the system renders the `bind.yaml` file. The system resolves all the directives enclosed in the double curly braces in the same way as in the files located in the `templates` directory in your Helm chart.\n\n\n### File specification\n\nDefine the following fields to create a valid `bind.yaml` file:\n\n|   Field Name   |      Description                       |\n|--------------|--------------------------------------------------------------|\n| **credential** | The list of credential variables returned during the binding action.  |\n| **credential.name** | The name of a given credential variable.  |\n| **credential.value** | The variable value. You can also use the Helm Chart templating directives. This field is interchangeable with **credential.valueFrom**. |\n| **credential.valueFrom** | The source of the given credential variable's value. This field is interchangeable with **credential.value**.  |\n| **credential.valueFrom.configMapKeyRef** | The field which selects a ConfigMap key in the Helm chart release Namespace.    |\n| **credential.valueFrom.configMapKeyRef.name** | The name of the ConfigMap.  |\n| **credential.valueFrom.configMapKeyRef.key**  | The name of the key from which the value is retrieved.  |\n| **credential.valueFrom.secretKeyRef**  | The field which selects a Secret key in the Helm Chart release Namespace.     |\n| **credential.valueFrom.secretKeyRef.name**    | The name of the Secret.     |\n| **credential.valueFrom.secretKeyRef.key**    | The name of the key from which the value is retrieved. |\n| **credential.valueFrom.serviceRef**   | The field which selects a service resource in the Helm Chart release Namespace. |\n| **credential.valueFrom.serviceRef.name**    | The name of the service.          |\n| **credential.valueFrom.serviceRef.jsonpath**  | The JSONPath expression used to select the specified field value. For more information, see the [User Guide](https://kubernetes.io/docs/user-guide/jsonpath/). |\n| **credentialFrom** | The list of sources to populate credential variables on the binding action. When the key exists in multiple sources, the value associated with the last source takes precedence. Variables from the `credential` section override the values if duplicated keys exist. |\n| **credentialFrom.configMapRef** | The ConfigMap to retrieve the values from. It must be available in the Helm chart release Namespace. |\n| **credentialFrom.configMapRef.name**    | The name of the ConfigMap.   |\n| **credentialFrom.secretRef** | The Secret to retrieve the values from. It must be available in the Helm chart release Namespace.  |\n| **credentialFrom.secretRef.name**    | The name of the Secret.      |\n\n\nSee the fully extended example of the `bind.yaml` file:\n\n```yaml\ncredential:\n  - name: HOST\n    value: redis.svc.cluster.local\n  - name: PORT\n    valueFrom:\n      serviceRef:\n        name: redis-svc\n        jsonpath: '{ .spec.ports[?(@.name==\"redis\")].port }'\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: redis-secrets\n        key: redis-password\n  - name: REDIS_DB_NAME\n    valueFrom:\n      configMapKeyRef:\n        name: redis-cm\n        key: redis-db-name\n\ncredentialFrom:\n  - configMapRef:\n    name: redis-config\n  - secretRef:\n    name: redis-v2-secrets\n```\n\nIn this example, the Helm Broker returns the following values:\n- A `HOST` key with the defined inlined value.\n- A `PORT` key with the value from the field specified by the JSONPath expressions. The `redis-svc` Service runs this expression.\n- A `REDIS_PASSWORD` key with a value selected by the `redis-password` key from the `redis-secrets` Secret.\n- All the key-value pairs fetched from the `redis-config` ConfigMap.\n- All the key-value pairs fetched from the `redis-v2-secrets` Secrets.\n\n\n### Credential name conflicts policy\n\nThe following rules apply in case of credential name conflicts:\n- If the **credential** and **credentialFrom** fields have duplicate values, the system uses the values from the **credential** field.\n- If you duplicate a key in the **credential** field, an error appears and informs you about the name of the key that the conflict refers to.\n- If a key exists in the multiple sources defined by the **credentialFrom** section, the value associated with the last source takes precedence.\n","type":"Details"},{"order":"03-03-create-bundles-repo","title":"Create a bundles repository","source":"\nThe repository in which you create your own bundles must be an HTTPS server with a specific structure so that the Helm Broker can fetch bundles from it. Your remote bundle repository can contain many bundles, each one compressed to the `.tgz` format and defined in `index.yaml` files. Depending on your needs and preferences, you can create one or more `index.yaml` files to categorize your bundles. The repository structure looks as follows:\n\n```\nsample-bundle-repository\n  ├── {bundle_x_name}-{bundle_x_version}.tgz         # A bundle compressed to a .tgz file\n  ├── {bundle_y_name}-{bundle_y_version}.tgz        \n  ├── ...                                      \n  ├── index.yaml                                     # A file which defines available bundles\n  ├── index-2.yaml                              \n  └── ...                                                    \n```\n\nRead [this](https://github.com/kyma-project/bundles/blob/master/docs/getting-started.md) document to learn how to set up your own bundles repository which generates `.tgz` and `index.yaml` files, and expose them using an HTTPS server. See the example of the Kyma `bundles` repository [here](https://github.com/kyma-project/bundles/releases).\n\n### {bundle_name}-{bundle_version}.tgz file\n\nThe `{bundle_name}-{bundle_version}.tgz` file is a compressed version of your bundle. To learn how to create your own bundle, read [this](#details-create-a-bundle) document.\n\n>**TIP:** If you contribute to the [bundles](https://github.com/kyma-project/bundles/tree/master/bundles) repository, you do not have to compress your bundles as the system does it automatically.\n\n### index.yaml file\n\nIn the `index.yaml` file, provide an entry for every single bundle from your bundles repository. The `index.yaml` file must have the following structure:\n\n```\napiVersion: v1\nentries:\n  {bundle_name}:\n    - name: {bundle_name}\n      description: {bundle_description}\n      version: {bundle_version}\n```\n\nSee the example:\n\n```yaml\napiVersion: v1\nentries:\n  redis:\n    - name: redis\n      description: Redis service\n      version: 0.0.1\n```\n","type":"Details"},{"order":"05-04-configure-hb","title":"Configuration","source":"\nBy default, the Helm Broker fetches bundles listed in the `index.yaml` file from the `bundles` repository [release](https://github.com/kyma-project/bundles/releases). You can also configure the Helm Broker to fetch bundle definitions from other remote HTTPS servers. To do so, follow these steps:\n\n1. [Create a repository](#details-create-a-bundles-repository) with your bundles. To complete this tutorial step by step, use the existing [bundles](https://github.com/kyma-project/bundles/tree/master/bundles) repository.\n2. [Install Kyma](/docs/0.9/root/kyma/#installation-installation) locally or on a cluster.\n3. Create a ConfigMap which contains an URL to the repository. You can either:\n\n  * Create a ConfigMap using the `kubectl create` command:\n\n    ```bash\n    kubectl create configmap my-helm-repos-urls -n kyma-system --from-literal=URLs=https://github.com/kyma-project/bundles/releases/download/0.3.0/index-testing.yaml\n    ```\n    >**NOTE:** If you want to fetch bundles from many HTTP servers, use `\\n` to separate the URLs.\n    \n    If you use this method, you must label your ConfigMap with `helm-broker-repo=true`. To add the label to your ConfigMap, run:\n    ```bash\n    kubectl label configmap my-helm-repos-urls -n kyma-system helm-broker-repo=true\n    ```\n\n  * Create a valid ConfigMap from the `yaml` file. Follow this example:\n\n    ```yaml\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-helm-repos-urls\n      labels:\n        helm-broker-repo: \"true\"\n        data:\n          URLs: |-\n            https://github.com/kyma-project/bundles/releases/download/0.3.0/index-testing.yaml\n    ```\n\n    Then, run:\n    ```bash\n    kubectl apply my-helm-repos-urls\n    ```\n    >**NOTE:** Your bundle repository must contain at least one file named `index.yaml` as the Helm Broker automatically searches for it when you provide the `https://{host}/{path}/{bundle_repo_version}/` URL to your ConfigMap.\n\n  The default ConfigMap provided by the Helm Broker is the [`helm-repos-urls`](https://github.com/kyma-project/kyma/blob/master/resources/helm-broker/templates/cfg-repos-url.yaml) ConfigMap. Do not edit this ConfigMap. Create a separate one instead. Depending on your needs and preferences, you can create one or more ConfigMaps with URLs to different remote HTTPS servers.\n\n4. The Helm Broker triggers the Service Catalog synchronization automatically. New Service Classes appear after a few seconds.\n\n## Configuration rules\n\nThese are the rules you must follow when you configure the Helm Broker. Otherwise, the Helm Broker will not display your bundles.\n* If you use your bundle in two different repositories simultaneously, the Helm Broker detects a conflict and does not display this bundle at all. You can see the details of the conflict in the Helm Broker application logs. If you need a given bundle in two or more repositories, do not use them at the same time.\n* On your non-local clusters, you can use only servers with TLS enabled. All incorrect or unsecured URLs will be omitted. Find the information about the rejected URLs in the Helm Broker logs. You can use unsecured URLs only on your local cluster. To use URLs without TLS enabled, set the **config.isDevelopMode** environment variable in the [values.yaml](https://github.com/kyma-project/kyma/blob/master/resources/helm-broker/values.yaml) file to `true`.\n"}]},"navigation":{"topics":[{"id":"kyma","contentType":"root","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"In a nutshell","anchor":"in-a-nutshell"},{"name":"Main features","anchor":"main-features"},{"name":"Technology stack","anchor":"technology-stack"},{"name":"Key components","anchor":"key-components"},{"name":"Kyma and Knative - brothers in arms","anchor":"kyma-and-knative---brothers-in-arms"},{"name":"How to start","anchor":"how-to-start"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Components","anchor":"components"},{"name":"Namespaces","anchor":"namespaces"},{"name":"Testing Kyma","anchor":"testing-kyma"},{"name":"Charts","anchor":"charts"},{"name":"Deploy with a private Docker registry","anchor":"deploy-with-a-private-docker-registry"}]},{"topicType":"Installation","name":"Installation","anchor":"installation","titles":[{"name":"Overview","anchor":"overview"},{"name":"Install Kyma locally","anchor":"install-kyma-locally"},{"name":"Install Kyma on a cluster","anchor":"install-kyma-on-a-cluster"},{"name":"Custom component installation","anchor":"custom-component-installation"},{"name":"Update Kyma","anchor":"update-kyma"},{"name":"Reinstall Kyma","anchor":"reinstall-kyma"},{"name":"Local installation scripts deep-dive","anchor":"local-installation-scripts-deep-dive"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Installation","anchor":"installation"}]},{"topicType":"Tutorials","name":"Tutorials","anchor":"tutorials","titles":[{"name":"Sample service deployment on local","anchor":"sample-service-deployment-on-local"},{"name":"Sample service deployment on a cluster","anchor":"sample-service-deployment-on-a-cluster"},{"name":"Develop a service locally without using Docker","anchor":"develop-a-service-locally-without-using-docker"},{"name":"Publish a service Docker image and deploy it to Kyma","anchor":"publish-a-service-docker-image-and-deploy-it-to-kyma"},{"name":"Helm overrides for Kyma installation","anchor":"helm-overrides-for-kyma-installation"}]},{"topicType":"Examples","name":"Examples","anchor":"examples","titles":[{"name":"Kyma features and concepts in practice","anchor":"kyma-features-and-concepts-in-practice"}]}]},{"id":"security","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Kubeconfig generator","anchor":"kubeconfig-generator"},{"name":"GraphQL","anchor":"graphql"},{"name":"GraphQL request flow","anchor":"graphql-request-flow"},{"name":"TLS in Tiller","anchor":"tls-in-tiller"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Group","anchor":"group"},{"name":"IDPPreset","anchor":"idppreset"}]},{"topicType":"Tutorials","name":"Tutorials","anchor":"tutorials","titles":[{"name":"Update TLS certificate","anchor":"update-tls-certificate"},{"name":"Manage static users in Dex","anchor":"manage-static-users-in-dex"},{"name":"Add an Identity Provider to Dex","anchor":"add-an-identity-provider-to-dex"}]}]},{"id":"service-catalog","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Resources","anchor":"resources"},{"name":"Provisioning and binding","anchor":"provisioning-and-binding"},{"name":"Service Catalog backup and restore","anchor":"service-catalog-backup-and-restore"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"ServiceBindingUsage","anchor":"servicebindingusage"},{"name":"UsageKind","anchor":"usagekind"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]},{"topicType":"Tutorials","name":"Tutorials","anchor":"tutorials","titles":[{"name":"Register a broker in the Service Catalog","anchor":"register-a-broker-in-the-service-catalog"}]},{"topicType":"UI Contracts","name":"UI Contracts","anchor":"ui-contracts","titles":[{"name":"Overview","anchor":"overview"},{"name":"Catalog view","anchor":"catalog-view"},{"name":"Instances View","anchor":"instances-view"}]},{"topicType":"Service Brokers","name":"Service Brokers","anchor":"service-brokers","titles":[{"name":"Overview","anchor":"overview"},{"name":"GCP Broker","anchor":"gcp-broker"},{"name":"Azure Service Broker","anchor":"azure-service-broker"}]}]},{"id":"helm-broker","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Create a bundle","anchor":"create-a-bundle"},{"name":"Bind bundles","anchor":"bind-bundles"},{"name":"Create a bundles repository","anchor":"create-a-bundles-repository"}]},{"topicType":null,"name":"Configuration","anchor":"configuration","titles":[]}]},{"id":"application-connector","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Architecture","name":"Architecture","anchor":"architecture","titles":[{"name":"Application Connector components","anchor":"application-connector-components"},{"name":"Connector Service","anchor":"connector-service"},{"name":"Application Gateway","anchor":"application-gateway"},{"name":"Application Broker","anchor":"application-broker"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"},{"name":"Access the Application Connector on a local Kyma deployment","anchor":"access-the-application-connector-on-a-local-kyma-deployment"},{"name":"Consume applications through the Service Catalog","anchor":"consume-applications-through-the-service-catalog"},{"name":"Application Registry","anchor":"application-registry"},{"name":"Pass an access token in a request header","anchor":"pass-an-access-token-in-a-request-header"},{"name":"Payload size limits for registering APIs","anchor":"payload-size-limits-for-registering-apis"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Application","anchor":"application"},{"name":"ApplicationMapping","anchor":"applicationmapping"},{"name":"EventActivation","anchor":"eventactivation"},{"name":"TokenRequest","anchor":"tokenrequest"}]},{"topicType":"Tutorials","name":"Tutorials","anchor":"tutorials","titles":[{"name":"Create a new Application","anchor":"create-a-new-application"},{"name":"Get the client certificate","anchor":"get-the-client-certificate"},{"name":"Register a service","anchor":"register-a-service"},{"name":"Register a secured API","anchor":"register-a-secured-api"},{"name":"Trigger a lambda with events","anchor":"trigger-a-lambda-with-events"},{"name":"Call a registered external service from Kyma","anchor":"call-a-registered-external-service-from-kyma"},{"name":"Bind an Application to a Namespace","anchor":"bind-an-application-to-a-namespace"},{"name":"Renew the client certificate","anchor":"renew-the-client-certificate"},{"name":"Revoke the client certificate","anchor":"revoke-the-client-certificate"},{"name":"Rotate the Root CA certificate and key","anchor":"rotate-the-root-ca-certificate-and-key"}]},{"topicType":"API","name":"API","anchor":"api","titles":[{"name":"Connector Service","anchor":"connector-service"},{"name":"Application Registry","anchor":"application-registry"},{"name":"Event Service","anchor":"event-service"}]}]},{"id":"event-bus","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Basic concepts","anchor":"basic-concepts"},{"name":"Event flow requirements","anchor":"event-flow-requirements"},{"name":"Service Programming Model","anchor":"service-programming-model"},{"name":"Troubleshooting","anchor":"troubleshooting"},{"name":"Subscription updates","anchor":"subscription-updates"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Subscription","anchor":"subscription"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"service-mesh","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Sidecar Proxy Injection","anchor":"sidecar-proxy-injection"},{"name":"Istio patch","anchor":"istio-patch"},{"name":"Istio RBAC configuration","anchor":"istio-rbac-configuration"}]}]},{"id":"serverless","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Custom Resources","anchor":"custom-resources"},{"name":"Managing Lambdas","anchor":"managing-lambdas"},{"name":"The Node.js Runtime","anchor":"the-node.js-runtime"}]},{"topicType":null,"name":"CLI reference","anchor":"cli-reference","titles":[]}]},{"id":"monitoring","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Tutorials","name":"Tutorials","anchor":"tutorials","titles":[{"name":"Expose custom metrics in Kyma","anchor":"expose-custom-metrics-in-kyma"}]}]},{"id":"tracing","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"}]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Benefits of distributed tracing","anchor":"benefits-of-distributed-tracing"},{"name":"Jaeger","anchor":"jaeger"},{"name":"Propagate HTTP headers","anchor":"propagate-http-headers"},{"name":"Compare traces","anchor":"compare-traces"}]}]},{"id":"api-gateway","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Security","anchor":"security"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Api","anchor":"api"}]}]},{"id":"logging","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Access logs","anchor":"access-logs"},{"name":"Storage configuration","anchor":"storage-configuration"}]}]},{"id":"backup","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Configuration","anchor":"configuration"},{"name":"Back up a Kyma cluster","anchor":"back-up-a-kyma-cluster"},{"name":"Restore a Kyma cluster","anchor":"restore-a-kyma-cluster"}]}]},{"id":"console","contentType":"components","sections":[{"topicType":"Overview","name":"Overview","anchor":"overview","titles":[{"name":"Overview","anchor":"overview"}]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"UI extensibility","anchor":"ui-extensibility"},{"name":"Console Backend Service","anchor":"console-backend-service"},{"name":"Security guidelines for MicroFrontend and ClusterMicroFrontend CRs","anchor":"security-guidelines-for-microfrontend-and-clustermicrofrontend-crs"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"MicroFrontend","anchor":"microfrontend"},{"name":"ClusterMicroFrontend","anchor":"clustermicrofrontend"},{"name":"BackendModule","anchor":"backendmodule"}]}]},{"id":"asset-store","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Asset custom resource lifecycle","anchor":"asset-custom-resource-lifecycle"},{"name":"Bucket custom resource lifecycle","anchor":"bucket-custom-resource-lifecycle"},{"name":"Minio and Minio Gateway","anchor":"minio-and-minio-gateway"},{"name":"Asset Metadata Service","anchor":"asset-metadata-service"},{"name":"Asset Upload Service","anchor":"asset-upload-service"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"Asset","anchor":"asset"},{"name":"Bucket","anchor":"bucket"},{"name":"ClusterAsset","anchor":"clusterasset"},{"name":"ClusterBucket","anchor":"clusterbucket"}]}]},{"id":"headless-cms","contentType":"components","sections":[{"topicType":null,"name":"Overview","anchor":"overview","titles":[]},{"topicType":null,"name":"Architecture","anchor":"architecture","titles":[]},{"topicType":"Details","name":"Details","anchor":"details","titles":[{"name":"Headless CMS in the Console","anchor":"headless-cms-in-the-console"},{"name":"DocsTopic custom resource lifecycle","anchor":"docstopic-custom-resource-lifecycle"}]},{"topicType":"Custom Resource","name":"Custom Resource","anchor":"custom-resource","titles":[{"name":"DocsTopic","anchor":"docstopic"},{"name":"ClusterDocsTopic","anchor":"clusterdocstopic"}]}]}]},"manifest":{"root":[{"displayName":"Kyma","id":"kyma"}],"components":[{"displayName":"Security","id":"security"},{"displayName":"Service Catalog","id":"service-catalog"},{"displayName":"Helm Broker","id":"helm-broker"},{"displayName":"Application Connector","id":"application-connector"},{"displayName":"Event Bus","id":"event-bus"},{"displayName":"Service Mesh","id":"service-mesh"},{"displayName":"Serverless","id":"serverless"},{"displayName":"Monitoring","id":"monitoring"},{"displayName":"Tracing","id":"tracing"},{"displayName":"API Gateway","id":"api-gateway"},{"displayName":"Logging","id":"logging"},{"displayName":"Backup","id":"backup"},{"displayName":"Console","id":"console"},{"displayName":"Asset Store","id":"asset-store"},{"displayName":"Headless CMS","id":"headless-cms"}]},"assetsPath":"/assets/docs/0.9/helm-broker/docs/assets/","locale":"en"}}